// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monitor.proto

#ifndef PROTOBUF_Monitor_2eproto__INCLUDED
#define PROTOBUF_Monitor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace PWRD {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Monitor_2eproto();
void protobuf_AssignDesc_Monitor_2eproto();
void protobuf_ShutdownFile_Monitor_2eproto();

class FileBlock;
class Result;

enum TYPE {
  HA = 1,
  LOG = 2,
  SQL = 3,
  FB = 4
};
bool TYPE_IsValid(int value);
const TYPE TYPE_MIN = HA;
const TYPE TYPE_MAX = FB;
const int TYPE_ARRAYSIZE = TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TYPE_descriptor();
inline const ::std::string& TYPE_Name(TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TYPE_descriptor(), value);
}
inline bool TYPE_Parse(
    const ::std::string& name, TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TYPE>(
    TYPE_descriptor(), name, value);
}
// ===================================================================

class FileBlock : public ::google::protobuf::Message {
 public:
  FileBlock();
  virtual ~FileBlock();
  
  FileBlock(const FileBlock& from);
  
  inline FileBlock& operator=(const FileBlock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileBlock& default_instance();
  
  void Swap(FileBlock* other);
  
  // implements Message ----------------------------------------------
  
  FileBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileBlock& from);
  void MergeFrom(const FileBlock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string taskid = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  inline const ::std::string& taskid() const;
  inline void set_taskid(const ::std::string& value);
  inline void set_taskid(const char* value);
  inline void set_taskid(const char* value, size_t size);
  inline ::std::string* mutable_taskid();
  inline ::std::string* release_taskid();
  
  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // required string path = 3;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // required string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // @@protoc_insertion_point(class_scope:PWRD.FileBlock)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* taskid_;
  ::std::string* type_;
  ::std::string* path_;
  ::std::string* content_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Monitor_2eproto();
  friend void protobuf_AssignDesc_Monitor_2eproto();
  friend void protobuf_ShutdownFile_Monitor_2eproto();
  
  void InitAsDefaultInstance();
  static FileBlock* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();
  
  Result(const Result& from);
  
  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();
  
  void Swap(Result* other);
  
  // implements Message ----------------------------------------------
  
  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string sql = 2;
  inline bool has_sql() const;
  inline void clear_sql();
  static const int kSqlFieldNumber = 2;
  inline const ::std::string& sql() const;
  inline void set_sql(const ::std::string& value);
  inline void set_sql(const char* value);
  inline void set_sql(const char* value, size_t size);
  inline ::std::string* mutable_sql();
  inline ::std::string* release_sql();
  
  // optional string taskid = 3;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskidFieldNumber = 3;
  inline const ::std::string& taskid() const;
  inline void set_taskid(const ::std::string& value);
  inline void set_taskid(const char* value);
  inline void set_taskid(const char* value, size_t size);
  inline ::std::string* mutable_taskid();
  inline ::std::string* release_taskid();
  
  // optional int32 errnum = 4;
  inline bool has_errnum() const;
  inline void clear_errnum();
  static const int kErrnumFieldNumber = 4;
  inline ::google::protobuf::int32 errnum() const;
  inline void set_errnum(::google::protobuf::int32 value);
  
  // optional string errmsg = 5;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrmsgFieldNumber = 5;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  
  // @@protoc_insertion_point(class_scope:PWRD.Result)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sql();
  inline void clear_has_sql();
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_errnum();
  inline void clear_has_errnum();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sql_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 errnum_;
  ::std::string* taskid_;
  ::std::string* errmsg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Monitor_2eproto();
  friend void protobuf_AssignDesc_Monitor_2eproto();
  friend void protobuf_ShutdownFile_Monitor_2eproto();
  
  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

// FileBlock

// required string taskid = 1;
inline bool FileBlock::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileBlock::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileBlock::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileBlock::clear_taskid() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    taskid_->clear();
  }
  clear_has_taskid();
}
inline const ::std::string& FileBlock::taskid() const {
  return *taskid_;
}
inline void FileBlock::set_taskid(const ::std::string& value) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(value);
}
inline void FileBlock::set_taskid(const char* value) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(value);
}
inline void FileBlock::set_taskid(const char* value, size_t size) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileBlock::mutable_taskid() {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  return taskid_;
}
inline ::std::string* FileBlock::release_taskid() {
  clear_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskid_;
    taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string type = 2;
inline bool FileBlock::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileBlock::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileBlock::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileBlock::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& FileBlock::type() const {
  return *type_;
}
inline void FileBlock::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void FileBlock::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void FileBlock::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileBlock::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* FileBlock::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string path = 3;
inline bool FileBlock::has_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileBlock::set_has_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileBlock::clear_has_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileBlock::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileBlock::path() const {
  return *path_;
}
inline void FileBlock::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileBlock::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileBlock::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileBlock::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileBlock::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string content = 4;
inline bool FileBlock::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileBlock::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileBlock::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileBlock::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& FileBlock::content() const {
  return *content_;
}
inline void FileBlock::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void FileBlock::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void FileBlock::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileBlock::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* FileBlock::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Result

// required int32 type = 1;
inline bool Result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Result::type() const {
  return type_;
}
inline void Result::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string sql = 2;
inline bool Result::has_sql() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_sql() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_sql() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_sql() {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    sql_->clear();
  }
  clear_has_sql();
}
inline const ::std::string& Result::sql() const {
  return *sql_;
}
inline void Result::set_sql(const ::std::string& value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void Result::set_sql(const char* value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void Result::set_sql(const char* value, size_t size) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Result::mutable_sql() {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  return sql_;
}
inline ::std::string* Result::release_sql() {
  clear_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sql_;
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string taskid = 3;
inline bool Result::has_taskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Result::set_has_taskid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Result::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Result::clear_taskid() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    taskid_->clear();
  }
  clear_has_taskid();
}
inline const ::std::string& Result::taskid() const {
  return *taskid_;
}
inline void Result::set_taskid(const ::std::string& value) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(value);
}
inline void Result::set_taskid(const char* value) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(value);
}
inline void Result::set_taskid(const char* value, size_t size) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Result::mutable_taskid() {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  return taskid_;
}
inline ::std::string* Result::release_taskid() {
  clear_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskid_;
    taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 errnum = 4;
inline bool Result::has_errnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Result::set_has_errnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Result::clear_has_errnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Result::clear_errnum() {
  errnum_ = 0;
  clear_has_errnum();
}
inline ::google::protobuf::int32 Result::errnum() const {
  return errnum_;
}
inline void Result::set_errnum(::google::protobuf::int32 value) {
  set_has_errnum();
  errnum_ = value;
}

// optional string errmsg = 5;
inline bool Result::has_errmsg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Result::set_has_errmsg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Result::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Result::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& Result::errmsg() const {
  return *errmsg_;
}
inline void Result::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void Result::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void Result::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Result::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  return errmsg_;
}
inline ::std::string* Result::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PWRD

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< PWRD::TYPE>() {
  return PWRD::TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Monitor_2eproto__INCLUDED
