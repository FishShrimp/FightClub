// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Element.proto

#ifndef PROTOBUF_Element_2eproto__INCLUDED
#define PROTOBUF_Element_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace PWRD {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Element_2eproto();
void protobuf_AssignDesc_Element_2eproto();
void protobuf_ShutdownFile_Element_2eproto();

class Entity;
class Element;

enum Entity_DATA_TYPE {
  Entity_DATA_TYPE_BOOL = 0,
  Entity_DATA_TYPE_INT = 1
};
bool Entity_DATA_TYPE_IsValid(int value);
const Entity_DATA_TYPE Entity_DATA_TYPE_DATA_TYPE_MIN = Entity_DATA_TYPE_BOOL;
const Entity_DATA_TYPE Entity_DATA_TYPE_DATA_TYPE_MAX = Entity_DATA_TYPE_INT;
const int Entity_DATA_TYPE_DATA_TYPE_ARRAYSIZE = Entity_DATA_TYPE_DATA_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* Entity_DATA_TYPE_descriptor();
inline const ::std::string& Entity_DATA_TYPE_Name(Entity_DATA_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    Entity_DATA_TYPE_descriptor(), value);
}
inline bool Entity_DATA_TYPE_Parse(
    const ::std::string& name, Entity_DATA_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Entity_DATA_TYPE>(
    Entity_DATA_TYPE_descriptor(), name, value);
}
enum Element_ELEMENT_TYPE {
  Element_ELEMENT_TYPE_ITEM_TYPE = 0,
  Element_ELEMENT_TYPE_EQUIP_TYPE = 1,
  Element_ELEMENT_TYPE_BUFF_TYPE = 2,
  Element_ELEMENT_TYPE_FRIENDS_TYPE = 3,
  Element_ELEMENT_TYPE_PKLIST_TYPE = 4,
  Element_ELEMENT_TYPE_NULL_TYPE = 100
};
bool Element_ELEMENT_TYPE_IsValid(int value);
const Element_ELEMENT_TYPE Element_ELEMENT_TYPE_ELEMENT_TYPE_MIN = Element_ELEMENT_TYPE_ITEM_TYPE;
const Element_ELEMENT_TYPE Element_ELEMENT_TYPE_ELEMENT_TYPE_MAX = Element_ELEMENT_TYPE_NULL_TYPE;
const int Element_ELEMENT_TYPE_ELEMENT_TYPE_ARRAYSIZE = Element_ELEMENT_TYPE_ELEMENT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* Element_ELEMENT_TYPE_descriptor();
inline const ::std::string& Element_ELEMENT_TYPE_Name(Element_ELEMENT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    Element_ELEMENT_TYPE_descriptor(), value);
}
inline bool Element_ELEMENT_TYPE_Parse(
    const ::std::string& name, Element_ELEMENT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Element_ELEMENT_TYPE>(
    Element_ELEMENT_TYPE_descriptor(), name, value);
}
// ===================================================================

class Entity : public ::google::protobuf::Message {
 public:
  Entity();
  virtual ~Entity();
  
  Entity(const Entity& from);
  
  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();
  
  void Swap(Entity* other);
  
  // implements Message ----------------------------------------------
  
  Entity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Entity_DATA_TYPE DATA_TYPE;
  static const DATA_TYPE BOOL = Entity_DATA_TYPE_BOOL;
  static const DATA_TYPE INT = Entity_DATA_TYPE_INT;
  static inline bool DATA_TYPE_IsValid(int value) {
    return Entity_DATA_TYPE_IsValid(value);
  }
  static const DATA_TYPE DATA_TYPE_MIN =
    Entity_DATA_TYPE_DATA_TYPE_MIN;
  static const DATA_TYPE DATA_TYPE_MAX =
    Entity_DATA_TYPE_DATA_TYPE_MAX;
  static const int DATA_TYPE_ARRAYSIZE =
    Entity_DATA_TYPE_DATA_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DATA_TYPE_descriptor() {
    return Entity_DATA_TYPE_descriptor();
  }
  static inline const ::std::string& DATA_TYPE_Name(DATA_TYPE value) {
    return Entity_DATA_TYPE_Name(value);
  }
  static inline bool DATA_TYPE_Parse(const ::std::string& name,
      DATA_TYPE* value) {
    return Entity_DATA_TYPE_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .PWRD.Entity.DATA_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PWRD::Entity_DATA_TYPE type() const;
  inline void set_type(::PWRD::Entity_DATA_TYPE value);
  
  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional int32 total = 3;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 3;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);
  
  // optional int32 use = 4;
  inline bool has_use() const;
  inline void clear_use();
  static const int kUseFieldNumber = 4;
  inline ::google::protobuf::int32 use() const;
  inline void set_use(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PWRD.Entity)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_use();
  inline void clear_has_use();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  int type_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::int32 use_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Element_2eproto();
  friend void protobuf_AssignDesc_Element_2eproto();
  friend void protobuf_ShutdownFile_Element_2eproto();
  
  void InitAsDefaultInstance();
  static Entity* default_instance_;
};
// -------------------------------------------------------------------

class Element : public ::google::protobuf::Message {
 public:
  Element();
  virtual ~Element();
  
  Element(const Element& from);
  
  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Element& default_instance();
  
  void Swap(Element* other);
  
  // implements Message ----------------------------------------------
  
  Element* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Element& from);
  void MergeFrom(const Element& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Element_ELEMENT_TYPE ELEMENT_TYPE;
  static const ELEMENT_TYPE ITEM_TYPE = Element_ELEMENT_TYPE_ITEM_TYPE;
  static const ELEMENT_TYPE EQUIP_TYPE = Element_ELEMENT_TYPE_EQUIP_TYPE;
  static const ELEMENT_TYPE BUFF_TYPE = Element_ELEMENT_TYPE_BUFF_TYPE;
  static const ELEMENT_TYPE FRIENDS_TYPE = Element_ELEMENT_TYPE_FRIENDS_TYPE;
  static const ELEMENT_TYPE PKLIST_TYPE = Element_ELEMENT_TYPE_PKLIST_TYPE;
  static const ELEMENT_TYPE NULL_TYPE = Element_ELEMENT_TYPE_NULL_TYPE;
  static inline bool ELEMENT_TYPE_IsValid(int value) {
    return Element_ELEMENT_TYPE_IsValid(value);
  }
  static const ELEMENT_TYPE ELEMENT_TYPE_MIN =
    Element_ELEMENT_TYPE_ELEMENT_TYPE_MIN;
  static const ELEMENT_TYPE ELEMENT_TYPE_MAX =
    Element_ELEMENT_TYPE_ELEMENT_TYPE_MAX;
  static const int ELEMENT_TYPE_ARRAYSIZE =
    Element_ELEMENT_TYPE_ELEMENT_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ELEMENT_TYPE_descriptor() {
    return Element_ELEMENT_TYPE_descriptor();
  }
  static inline const ::std::string& ELEMENT_TYPE_Name(ELEMENT_TYPE value) {
    return Element_ELEMENT_TYPE_Name(value);
  }
  static inline bool ELEMENT_TYPE_Parse(const ::std::string& name,
      ELEMENT_TYPE* value) {
    return Element_ELEMENT_TYPE_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .PWRD.Element.ELEMENT_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PWRD::Element_ELEMENT_TYPE type() const;
  inline void set_type(::PWRD::Element_ELEMENT_TYPE value);
  
  // repeated .PWRD.Entity entity = 2;
  inline int entity_size() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 2;
  inline const ::PWRD::Entity& entity(int index) const;
  inline ::PWRD::Entity* mutable_entity(int index);
  inline ::PWRD::Entity* add_entity();
  inline const ::google::protobuf::RepeatedPtrField< ::PWRD::Entity >&
      entity() const;
  inline ::google::protobuf::RepeatedPtrField< ::PWRD::Entity >*
      mutable_entity();
  
  // @@protoc_insertion_point(class_scope:PWRD.Element)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PWRD::Entity > entity_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Element_2eproto();
  friend void protobuf_AssignDesc_Element_2eproto();
  friend void protobuf_ShutdownFile_Element_2eproto();
  
  void InitAsDefaultInstance();
  static Element* default_instance_;
};
// ===================================================================


// ===================================================================

// Entity

// required .PWRD.Entity.DATA_TYPE type = 1;
inline bool Entity::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entity::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entity::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entity::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PWRD::Entity_DATA_TYPE Entity::type() const {
  return static_cast< ::PWRD::Entity_DATA_TYPE >(type_);
}
inline void Entity::set_type(::PWRD::Entity_DATA_TYPE value) {
  GOOGLE_DCHECK(::PWRD::Entity_DATA_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string key = 2;
inline bool Entity::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entity::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entity::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entity::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Entity::key() const {
  return *key_;
}
inline void Entity::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Entity::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Entity::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entity::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Entity::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 total = 3;
inline bool Entity::has_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entity::set_has_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Entity::clear_has_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Entity::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 Entity::total() const {
  return total_;
}
inline void Entity::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// optional int32 use = 4;
inline bool Entity::has_use() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Entity::set_has_use() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Entity::clear_has_use() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Entity::clear_use() {
  use_ = 0;
  clear_has_use();
}
inline ::google::protobuf::int32 Entity::use() const {
  return use_;
}
inline void Entity::set_use(::google::protobuf::int32 value) {
  set_has_use();
  use_ = value;
}

// -------------------------------------------------------------------

// Element

// required .PWRD.Element.ELEMENT_TYPE type = 1;
inline bool Element::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Element::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Element::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Element::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PWRD::Element_ELEMENT_TYPE Element::type() const {
  return static_cast< ::PWRD::Element_ELEMENT_TYPE >(type_);
}
inline void Element::set_type(::PWRD::Element_ELEMENT_TYPE value) {
  GOOGLE_DCHECK(::PWRD::Element_ELEMENT_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .PWRD.Entity entity = 2;
inline int Element::entity_size() const {
  return entity_.size();
}
inline void Element::clear_entity() {
  entity_.Clear();
}
inline const ::PWRD::Entity& Element::entity(int index) const {
  return entity_.Get(index);
}
inline ::PWRD::Entity* Element::mutable_entity(int index) {
  return entity_.Mutable(index);
}
inline ::PWRD::Entity* Element::add_entity() {
  return entity_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PWRD::Entity >&
Element::entity() const {
  return entity_;
}
inline ::google::protobuf::RepeatedPtrField< ::PWRD::Entity >*
Element::mutable_entity() {
  return &entity_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PWRD

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PWRD::Entity_DATA_TYPE>() {
  return ::PWRD::Entity_DATA_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PWRD::Element_ELEMENT_TYPE>() {
  return ::PWRD::Element_ELEMENT_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Element_2eproto__INCLUDED
