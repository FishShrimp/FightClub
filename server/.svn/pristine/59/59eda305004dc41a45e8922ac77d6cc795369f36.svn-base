// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FightClub.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PWRD {

namespace {

const ::google::protobuf::Descriptor* File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  File_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_FileStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_FileStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_FileList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_FileList_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_Registe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Registe_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Registe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Registe_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_Room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Room_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Room_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_TimeStamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_TimeStamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_TimeStamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_TimeStamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Equipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* PKProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PKProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_PKList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_PKList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PKTop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PKTop_reflection_ = NULL;
const ::google::protobuf::Descriptor* PKTopList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PKTopList_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_Bill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Bill_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Bill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Bill_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Gold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Gold_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_Money_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Money_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_PKStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_PKStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_PKStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_PKStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_PKList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_PKList_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_FightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_FightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_FightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_FightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_FightResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_FightResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_FightResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_FightResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Beat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Beat_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_Fight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Fight_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Fight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Fight_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_HardBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_HardBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_HardBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_HardBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* QTE_Beat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QTE_Beat_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_QTE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_QTE_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_QTE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_QTE_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_FightResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_FightResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_FightResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_FightResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_Friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_AddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_AddFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STAT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_FightClub_2eproto() {
  protobuf_AddDesc_FightClub_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FightClub.proto");
  GOOGLE_CHECK(file != NULL);
  File_descriptor_ = file->message_type(0);
  static const int File_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, md5sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, match_),
  };
  File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      File_descriptor_,
      File::default_instance_,
      File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(File));
  Status_descriptor_ = file->message_type(1);
  static const int Status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, path_),
  };
  Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Status));
  C2S_FileStatus_descriptor_ = file->message_type(2);
  static const int C2S_FileStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FileStatus, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FileStatus, stat_),
  };
  C2S_FileStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_FileStatus_descriptor_,
      C2S_FileStatus::default_instance_,
      C2S_FileStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FileStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FileStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_FileStatus));
  S2C_FileList_descriptor_ = file->message_type(3);
  static const int S2C_FileList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FileList, file_),
  };
  S2C_FileList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_FileList_descriptor_,
      S2C_FileList::default_instance_,
      S2C_FileList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FileList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FileList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_FileList));
  C2S_Version_descriptor_ = file->message_type(4);
  static const int C2S_Version_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Version, version_),
  };
  C2S_Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Version_descriptor_,
      C2S_Version::default_instance_,
      C2S_Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Version));
  S2C_Version_descriptor_ = file->message_type(5);
  static const int S2C_Version_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Version, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Version, flist_),
  };
  S2C_Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Version_descriptor_,
      S2C_Version::default_instance_,
      S2C_Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Version));
  C2S_Registe_descriptor_ = file->message_type(6);
  static const int C2S_Registe_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Registe, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Registe, uuid_),
  };
  C2S_Registe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Registe_descriptor_,
      C2S_Registe::default_instance_,
      C2S_Registe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Registe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Registe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Registe));
  S2C_Registe_descriptor_ = file->message_type(7);
  static const int S2C_Registe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Registe, roleid_),
  };
  S2C_Registe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Registe_descriptor_,
      S2C_Registe::default_instance_,
      S2C_Registe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Registe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Registe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Registe));
  C2S_Login_descriptor_ = file->message_type(8);
  static const int C2S_Login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Login, roleid_),
  };
  C2S_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Login_descriptor_,
      C2S_Login::default_instance_,
      C2S_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Login));
  S2C_Login_descriptor_ = file->message_type(9);
  static const int S2C_Login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Login, ok_),
  };
  S2C_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Login_descriptor_,
      S2C_Login::default_instance_,
      S2C_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Login));
  C2S_Room_descriptor_ = file->message_type(10);
  static const int C2S_Room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Room, roleid_),
  };
  C2S_Room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Room_descriptor_,
      C2S_Room::default_instance_,
      C2S_Room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Room));
  S2C_Room_descriptor_ = file->message_type(11);
  static const int S2C_Room_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Room, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Room, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Room, bulletin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Room, mail_),
  };
  S2C_Room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Room_descriptor_,
      S2C_Room::default_instance_,
      S2C_Room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Room));
  C2S_TimeStamp_descriptor_ = file->message_type(12);
  static const int C2S_TimeStamp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TimeStamp, timestamp_),
  };
  C2S_TimeStamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_TimeStamp_descriptor_,
      C2S_TimeStamp::default_instance_,
      C2S_TimeStamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TimeStamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TimeStamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_TimeStamp));
  S2C_TimeStamp_descriptor_ = file->message_type(13);
  static const int S2C_TimeStamp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TimeStamp, timestamp_),
  };
  S2C_TimeStamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_TimeStamp_descriptor_,
      S2C_TimeStamp::default_instance_,
      S2C_TimeStamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TimeStamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TimeStamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_TimeStamp));
  Equipment_descriptor_ = file->message_type(14);
  static const int Equipment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, elist_),
  };
  Equipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Equipment_descriptor_,
      Equipment::default_instance_,
      Equipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Equipment));
  C2S_Property_descriptor_ = file->message_type(15);
  static const int C2S_Property_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Property, roleid_),
  };
  C2S_Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Property_descriptor_,
      C2S_Property::default_instance_,
      C2S_Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Property));
  S2C_Property_descriptor_ = file->message_type(16);
  static const int S2C_Property_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, pklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, pkexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, rankexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, ranklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, buffs_),
  };
  S2C_Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Property_descriptor_,
      S2C_Property::default_instance_,
      S2C_Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Property));
  PKProperty_descriptor_ = file->message_type(17);
  static const int PKProperty_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKProperty, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKProperty, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKProperty, pklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKProperty, pkexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKProperty, ranklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKProperty, rankexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKProperty, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKProperty, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKProperty, buffs_),
  };
  PKProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PKProperty_descriptor_,
      PKProperty::default_instance_,
      PKProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PKProperty));
  C2S_PKList_descriptor_ = file->message_type(18);
  static const int C2S_PKList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PKList, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PKList, request_),
  };
  C2S_PKList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_PKList_descriptor_,
      C2S_PKList::default_instance_,
      C2S_PKList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PKList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PKList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_PKList));
  PKTop_descriptor_ = file->message_type(19);
  static const int PKTop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKTop, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKTop, pkexp_),
  };
  PKTop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PKTop_descriptor_,
      PKTop::default_instance_,
      PKTop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKTop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKTop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PKTop));
  PKTopList_descriptor_ = file->message_type(20);
  static const int PKTopList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKTopList, pktop_),
  };
  PKTopList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PKTopList_descriptor_,
      PKTopList::default_instance_,
      PKTopList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKTopList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKTopList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PKTopList));
  C2S_Bill_descriptor_ = file->message_type(21);
  static const int C2S_Bill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bill, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bill, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bill, num_),
  };
  C2S_Bill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Bill_descriptor_,
      C2S_Bill::default_instance_,
      C2S_Bill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Bill));
  S2C_Bill_descriptor_ = file->message_type(22);
  static const int S2C_Bill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Bill, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Bill, status_),
  };
  S2C_Bill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Bill_descriptor_,
      S2C_Bill::default_instance_,
      S2C_Bill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Bill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Bill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Bill));
  S2C_Gold_descriptor_ = file->message_type(23);
  static const int S2C_Gold_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Gold, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Gold, gold_),
  };
  S2C_Gold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Gold_descriptor_,
      S2C_Gold::default_instance_,
      S2C_Gold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Gold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Gold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Gold));
  C2S_Money_descriptor_ = file->message_type(24);
  static const int C2S_Money_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Money, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Money, money_),
  };
  C2S_Money_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Money_descriptor_,
      C2S_Money::default_instance_,
      C2S_Money_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Money, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Money, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Money));
  C2S_PKStat_descriptor_ = file->message_type(25);
  static const int C2S_PKStat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PKStat, roleid_),
  };
  C2S_PKStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_PKStat_descriptor_,
      C2S_PKStat::default_instance_,
      C2S_PKStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PKStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PKStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_PKStat));
  S2C_PKStat_descriptor_ = file->message_type(26);
  static const int S2C_PKStat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PKStat, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PKStat, stat_),
  };
  S2C_PKStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_PKStat_descriptor_,
      S2C_PKStat::default_instance_,
      S2C_PKStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PKStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PKStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_PKStat));
  S2C_PKList_descriptor_ = file->message_type(27);
  static const int S2C_PKList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PKList, pkpro_),
  };
  S2C_PKList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_PKList_descriptor_,
      S2C_PKList::default_instance_,
      S2C_PKList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PKList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PKList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_PKList));
  C2S_FightRequest_descriptor_ = file->message_type(28);
  static const int C2S_FightRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightRequest, froleid_),
  };
  C2S_FightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_FightRequest_descriptor_,
      C2S_FightRequest::default_instance_,
      C2S_FightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_FightRequest));
  S2C_FightRequest_descriptor_ = file->message_type(29);
  static const int S2C_FightRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightRequest, froleid_),
  };
  S2C_FightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_FightRequest_descriptor_,
      S2C_FightRequest::default_instance_,
      S2C_FightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_FightRequest));
  C2S_FightResponse_descriptor_ = file->message_type(30);
  static const int C2S_FightResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResponse, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResponse, ido_),
  };
  C2S_FightResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_FightResponse_descriptor_,
      C2S_FightResponse::default_instance_,
      C2S_FightResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_FightResponse));
  S2C_FightResponse_descriptor_ = file->message_type(31);
  static const int S2C_FightResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResponse, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResponse, ido_),
  };
  S2C_FightResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_FightResponse_descriptor_,
      S2C_FightResponse::default_instance_,
      S2C_FightResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_FightResponse));
  Beat_descriptor_ = file->message_type(32);
  static const int Beat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beat, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beat, animation_),
  };
  Beat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Beat_descriptor_,
      Beat::default_instance_,
      Beat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Beat));
  C2S_Fight_descriptor_ = file->message_type(33);
  static const int C2S_Fight_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Fight, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Fight, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Fight, beat_),
  };
  C2S_Fight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Fight_descriptor_,
      C2S_Fight::default_instance_,
      C2S_Fight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Fight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Fight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Fight));
  S2C_Fight_descriptor_ = file->message_type(34);
  static const int S2C_Fight_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Fight, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Fight, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Fight, beat_),
  };
  S2C_Fight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Fight_descriptor_,
      S2C_Fight::default_instance_,
      S2C_Fight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Fight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Fight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Fight));
  C2S_HardBeat_descriptor_ = file->message_type(35);
  static const int C2S_HardBeat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_HardBeat, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_HardBeat, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_HardBeat, beat_),
  };
  C2S_HardBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_HardBeat_descriptor_,
      C2S_HardBeat::default_instance_,
      C2S_HardBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_HardBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_HardBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_HardBeat));
  S2C_HardBeat_descriptor_ = file->message_type(36);
  static const int S2C_HardBeat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_HardBeat, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_HardBeat, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_HardBeat, beat_),
  };
  S2C_HardBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_HardBeat_descriptor_,
      S2C_HardBeat::default_instance_,
      S2C_HardBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_HardBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_HardBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_HardBeat));
  QTE_Beat_descriptor_ = file->message_type(37);
  static const int QTE_Beat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTE_Beat, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTE_Beat, during_),
  };
  QTE_Beat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QTE_Beat_descriptor_,
      QTE_Beat::default_instance_,
      QTE_Beat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTE_Beat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTE_Beat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QTE_Beat));
  C2S_QTE_descriptor_ = file->message_type(38);
  static const int C2S_QTE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_QTE, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_QTE, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_QTE, qte_),
  };
  C2S_QTE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_QTE_descriptor_,
      C2S_QTE::default_instance_,
      C2S_QTE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_QTE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_QTE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_QTE));
  S2C_QTE_descriptor_ = file->message_type(39);
  static const int S2C_QTE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_QTE, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_QTE, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_QTE, qte_),
  };
  S2C_QTE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_QTE_descriptor_,
      S2C_QTE::default_instance_,
      S2C_QTE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_QTE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_QTE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_QTE));
  C2S_Item_descriptor_ = file->message_type(40);
  static const int C2S_Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Item, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Item, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Item, itemid_),
  };
  C2S_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Item_descriptor_,
      C2S_Item::default_instance_,
      C2S_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Item));
  S2C_Item_descriptor_ = file->message_type(41);
  static const int S2C_Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Item, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Item, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Item, itemid_),
  };
  S2C_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Item_descriptor_,
      S2C_Item::default_instance_,
      S2C_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Item));
  S2C_FightResult_descriptor_ = file->message_type(42);
  static const int S2C_FightResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResult, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResult, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResult, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResult, equipment_),
  };
  S2C_FightResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_FightResult_descriptor_,
      S2C_FightResult::default_instance_,
      S2C_FightResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FightResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_FightResult));
  C2S_FightResult_descriptor_ = file->message_type(43);
  static const int C2S_FightResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResult, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResult, froleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResult, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResult, equipment_),
  };
  C2S_FightResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_FightResult_descriptor_,
      C2S_FightResult::default_instance_,
      C2S_FightResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FightResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_FightResult));
  C2S_Friend_descriptor_ = file->message_type(44);
  static const int C2S_Friend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Friend, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Friend, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Friend, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Friend, length_),
  };
  C2S_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Friend_descriptor_,
      C2S_Friend::default_instance_,
      C2S_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Friend));
  S2C_Friend_descriptor_ = file->message_type(45);
  static const int S2C_Friend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Friend, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Friend, flist_),
  };
  S2C_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Friend_descriptor_,
      S2C_Friend::default_instance_,
      S2C_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Friend));
  C2S_AddFriend_descriptor_ = file->message_type(46);
  static const int C2S_AddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_AddFriend, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_AddFriend, flist_),
  };
  C2S_AddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_AddFriend_descriptor_,
      C2S_AddFriend::default_instance_,
      C2S_AddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_AddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_AddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_AddFriend));
  S2C_AddFriend_descriptor_ = file->message_type(47);
  static const int S2C_AddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_AddFriend, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_AddFriend, flist_),
  };
  S2C_AddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_AddFriend_descriptor_,
      S2C_AddFriend::default_instance_,
      S2C_AddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_AddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_AddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_AddFriend));
  TYPE_descriptor_ = file->enum_type(0);
  RESULT_descriptor_ = file->enum_type(1);
  STAT_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FightClub_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    File_descriptor_, &File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_FileStatus_descriptor_, &C2S_FileStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_FileList_descriptor_, &S2C_FileList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Version_descriptor_, &C2S_Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Version_descriptor_, &S2C_Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Registe_descriptor_, &C2S_Registe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Registe_descriptor_, &S2C_Registe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Login_descriptor_, &C2S_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Login_descriptor_, &S2C_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Room_descriptor_, &C2S_Room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Room_descriptor_, &S2C_Room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_TimeStamp_descriptor_, &C2S_TimeStamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_TimeStamp_descriptor_, &S2C_TimeStamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Equipment_descriptor_, &Equipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Property_descriptor_, &C2S_Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Property_descriptor_, &S2C_Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PKProperty_descriptor_, &PKProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_PKList_descriptor_, &C2S_PKList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PKTop_descriptor_, &PKTop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PKTopList_descriptor_, &PKTopList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Bill_descriptor_, &C2S_Bill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Bill_descriptor_, &S2C_Bill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Gold_descriptor_, &S2C_Gold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Money_descriptor_, &C2S_Money::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_PKStat_descriptor_, &C2S_PKStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_PKStat_descriptor_, &S2C_PKStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_PKList_descriptor_, &S2C_PKList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_FightRequest_descriptor_, &C2S_FightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_FightRequest_descriptor_, &S2C_FightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_FightResponse_descriptor_, &C2S_FightResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_FightResponse_descriptor_, &S2C_FightResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Beat_descriptor_, &Beat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Fight_descriptor_, &C2S_Fight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Fight_descriptor_, &S2C_Fight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_HardBeat_descriptor_, &C2S_HardBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_HardBeat_descriptor_, &S2C_HardBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QTE_Beat_descriptor_, &QTE_Beat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_QTE_descriptor_, &C2S_QTE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_QTE_descriptor_, &S2C_QTE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Item_descriptor_, &C2S_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Item_descriptor_, &S2C_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_FightResult_descriptor_, &S2C_FightResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_FightResult_descriptor_, &C2S_FightResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Friend_descriptor_, &C2S_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Friend_descriptor_, &S2C_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_AddFriend_descriptor_, &C2S_AddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_AddFriend_descriptor_, &S2C_AddFriend::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FightClub_2eproto() {
  delete File::default_instance_;
  delete File_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
  delete C2S_FileStatus::default_instance_;
  delete C2S_FileStatus_reflection_;
  delete S2C_FileList::default_instance_;
  delete S2C_FileList_reflection_;
  delete C2S_Version::default_instance_;
  delete C2S_Version_reflection_;
  delete S2C_Version::default_instance_;
  delete S2C_Version_reflection_;
  delete C2S_Registe::default_instance_;
  delete C2S_Registe_reflection_;
  delete S2C_Registe::default_instance_;
  delete S2C_Registe_reflection_;
  delete C2S_Login::default_instance_;
  delete C2S_Login_reflection_;
  delete S2C_Login::default_instance_;
  delete S2C_Login_reflection_;
  delete C2S_Room::default_instance_;
  delete C2S_Room_reflection_;
  delete S2C_Room::default_instance_;
  delete S2C_Room_reflection_;
  delete C2S_TimeStamp::default_instance_;
  delete C2S_TimeStamp_reflection_;
  delete S2C_TimeStamp::default_instance_;
  delete S2C_TimeStamp_reflection_;
  delete Equipment::default_instance_;
  delete Equipment_reflection_;
  delete C2S_Property::default_instance_;
  delete C2S_Property_reflection_;
  delete S2C_Property::default_instance_;
  delete S2C_Property_reflection_;
  delete PKProperty::default_instance_;
  delete PKProperty_reflection_;
  delete C2S_PKList::default_instance_;
  delete C2S_PKList_reflection_;
  delete PKTop::default_instance_;
  delete PKTop_reflection_;
  delete PKTopList::default_instance_;
  delete PKTopList_reflection_;
  delete C2S_Bill::default_instance_;
  delete C2S_Bill_reflection_;
  delete S2C_Bill::default_instance_;
  delete S2C_Bill_reflection_;
  delete S2C_Gold::default_instance_;
  delete S2C_Gold_reflection_;
  delete C2S_Money::default_instance_;
  delete C2S_Money_reflection_;
  delete C2S_PKStat::default_instance_;
  delete C2S_PKStat_reflection_;
  delete S2C_PKStat::default_instance_;
  delete S2C_PKStat_reflection_;
  delete S2C_PKList::default_instance_;
  delete S2C_PKList_reflection_;
  delete C2S_FightRequest::default_instance_;
  delete C2S_FightRequest_reflection_;
  delete S2C_FightRequest::default_instance_;
  delete S2C_FightRequest_reflection_;
  delete C2S_FightResponse::default_instance_;
  delete C2S_FightResponse_reflection_;
  delete S2C_FightResponse::default_instance_;
  delete S2C_FightResponse_reflection_;
  delete Beat::default_instance_;
  delete Beat_reflection_;
  delete C2S_Fight::default_instance_;
  delete C2S_Fight_reflection_;
  delete S2C_Fight::default_instance_;
  delete S2C_Fight_reflection_;
  delete C2S_HardBeat::default_instance_;
  delete C2S_HardBeat_reflection_;
  delete S2C_HardBeat::default_instance_;
  delete S2C_HardBeat_reflection_;
  delete QTE_Beat::default_instance_;
  delete QTE_Beat_reflection_;
  delete C2S_QTE::default_instance_;
  delete C2S_QTE_reflection_;
  delete S2C_QTE::default_instance_;
  delete S2C_QTE_reflection_;
  delete C2S_Item::default_instance_;
  delete C2S_Item_reflection_;
  delete S2C_Item::default_instance_;
  delete S2C_Item_reflection_;
  delete S2C_FightResult::default_instance_;
  delete S2C_FightResult_reflection_;
  delete C2S_FightResult::default_instance_;
  delete C2S_FightResult_reflection_;
  delete C2S_Friend::default_instance_;
  delete C2S_Friend_reflection_;
  delete S2C_Friend::default_instance_;
  delete S2C_Friend_reflection_;
  delete C2S_AddFriend::default_instance_;
  delete C2S_AddFriend_reflection_;
  delete S2C_AddFriend::default_instance_;
  delete S2C_AddFriend_reflection_;
}

void protobuf_AddDesc_FightClub_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017FightClub.proto\022\004PWRD\"D\n\004File\022\014\n\004path\030"
    "\001 \002(\t\022\017\n\007content\030\002 \002(\t\022\016\n\006md5sum\030\003 \002(\t\022\r"
    "\n\005match\030\004 \002(\010\"\026\n\006Status\022\014\n\004path\030\001 \002(\t\";\n"
    "\016C2S_FileStatus\022\r\n\005match\030\001 \002(\010\022\032\n\004stat\030\002"
    " \003(\0132\014.PWRD.Status\"(\n\014S2C_FileList\022\030\n\004fi"
    "le\030\001 \003(\0132\n.PWRD.File\"\036\n\013C2S_Version\022\017\n\007v"
    "ersion\030\001 \002(\t\"7\n\013S2C_Version\022\r\n\005match\030\001 \002"
    "(\010\022\031\n\005flist\030\002 \003(\0132\n.PWRD.File\"-\n\013C2S_Reg"
    "iste\022\020\n\010rolename\030\001 \002(\t\022\014\n\004uuid\030\002 \002(\t\"\035\n\013"
    "S2C_Registe\022\016\n\006roleid\030\001 \002(\t\"\033\n\tC2S_Login"
    "\022\016\n\006roleid\030\001 \002(\t\"\027\n\tS2C_Login\022\n\n\002ok\030\001 \002("
    "\010\"\032\n\010C2S_Room\022\016\n\006roleid\030\001 \002(\t\"J\n\010S2C_Roo"
    "m\022\016\n\006roleid\030\001 \002(\t\022\016\n\006online\030\002 \002(\005\022\020\n\010bul"
    "letin\030\003 \002(\t\022\014\n\004mail\030\004 \002(\005\"\"\n\rC2S_TimeSta"
    "mp\022\021\n\ttimestamp\030\001 \002(\t\"\"\n\rS2C_TimeStamp\022\021"
    "\n\ttimestamp\030\001 \002(\t\"*\n\tEquipment\022\016\n\006roleid"
    "\030\001 \002(\t\022\r\n\005elist\030\002 \002(\t\"\036\n\014C2S_Property\022\016\n"
    "\006roleid\030\001 \002(\t\"\277\001\n\014S2C_Property\022\016\n\006roleid"
    "\030\001 \002(\t\022\020\n\010rolename\030\002 \002(\t\022\017\n\007pklevel\030\003 \002("
    "\005\022\r\n\005pkexp\030\004 \002(\005\022\017\n\007rankexp\030\005 \002(\005\022\021\n\tran"
    "klevel\030\006 \002(\005\022\r\n\005money\030\007 \002(\005\022\014\n\004gold\030\010 \002("
    "\005\022\r\n\005items\030\t \002(\t\022\016\n\006equips\030\n \002(\t\022\r\n\005buff"
    "s\030\013 \002(\t\"\240\001\n\nPKProperty\022\016\n\006roleid\030\001 \002(\t\022\020"
    "\n\010rolename\030\002 \002(\t\022\017\n\007pklevel\030\003 \002(\005\022\r\n\005pke"
    "xp\030\004 \002(\005\022\021\n\tranklevel\030\005 \002(\005\022\017\n\007rankexp\030\006"
    " \002(\005\022\r\n\005items\030\007 \002(\t\022\016\n\006equips\030\010 \002(\t\022\r\n\005b"
    "uffs\030\t \002(\t\"-\n\nC2S_PKList\022\016\n\006roleid\030\001 \002(\t"
    "\022\017\n\007request\030\002 \002(\t\"&\n\005PKTop\022\016\n\006roleid\030\001 \002"
    "(\t\022\r\n\005pkexp\030\002 \002(\005\"\'\n\tPKTopList\022\032\n\005pktop\030"
    "\001 \003(\0132\013.PWRD.PKTop\"7\n\010C2S_Bill\022\016\n\006roleid"
    "\030\001 \002(\t\022\016\n\006itemid\030\002 \002(\t\022\013\n\003num\030\003 \002(\005\"*\n\010S"
    "2C_Bill\022\016\n\006roleid\030\001 \002(\t\022\016\n\006status\030\002 \002(\005\""
    "(\n\010S2C_Gold\022\016\n\006roleid\030\001 \002(\t\022\014\n\004gold\030\002 \002("
    "\005\"*\n\tC2S_Money\022\016\n\006roleid\030\001 \002(\t\022\r\n\005money\030"
    "\002 \002(\005\"\034\n\nC2S_PKStat\022\016\n\006roleid\030\001 \002(\t\"6\n\nS"
    "2C_PKStat\022\016\n\006roleid\030\001 \002(\t\022\030\n\004stat\030\002 \002(\0162"
    "\n.PWRD.STAT\"-\n\nS2C_PKList\022\037\n\005pkpro\030\001 \003(\013"
    "2\020.PWRD.PKProperty\"3\n\020C2S_FightRequest\022\016"
    "\n\006roleid\030\001 \002(\t\022\017\n\007froleid\030\002 \002(\t\"3\n\020S2C_F"
    "ightRequest\022\016\n\006roleid\030\001 \002(\t\022\017\n\007froleid\030\002"
    " \002(\t\"A\n\021C2S_FightResponse\022\016\n\006roleid\030\001 \002("
    "\t\022\017\n\007froleid\030\002 \002(\t\022\013\n\003ido\030\003 \002(\010\"A\n\021S2C_F"
    "ightResponse\022\016\n\006roleid\030\001 \002(\t\022\017\n\007froleid\030"
    "\002 \002(\t\022\013\n\003ido\030\003 \002(\010\"%\n\004Beat\022\n\n\002hp\030\001 \002(\005\022\021"
    "\n\tanimation\030\002 \002(\t\"F\n\tC2S_Fight\022\016\n\006roleid"
    "\030\001 \002(\t\022\017\n\007froleid\030\002 \002(\t\022\030\n\004beat\030\003 \002(\0132\n."
    "PWRD.Beat\"F\n\tS2C_Fight\022\016\n\006roleid\030\001 \002(\t\022\017"
    "\n\007froleid\030\002 \002(\t\022\030\n\004beat\030\003 \002(\0132\n.PWRD.Bea"
    "t\"I\n\014C2S_HardBeat\022\016\n\006roleid\030\001 \002(\t\022\017\n\007fro"
    "leid\030\002 \002(\t\022\030\n\004beat\030\003 \002(\0132\n.PWRD.Beat\"I\n\014"
    "S2C_HardBeat\022\016\n\006roleid\030\001 \002(\t\022\017\n\007froleid\030"
    "\002 \002(\t\022\030\n\004beat\030\003 \002(\0132\n.PWRD.Beat\"&\n\010QTE_B"
    "eat\022\n\n\002hp\030\001 \002(\005\022\016\n\006during\030\002 \002(\005\"G\n\007C2S_Q"
    "TE\022\016\n\006roleid\030\001 \002(\t\022\017\n\007froleid\030\002 \002(\t\022\033\n\003q"
    "te\030\003 \003(\0132\016.PWRD.QTE_Beat\"G\n\007S2C_QTE\022\016\n\006r"
    "oleid\030\001 \002(\t\022\017\n\007froleid\030\002 \002(\t\022\033\n\003qte\030\003 \003("
    "\0132\016.PWRD.QTE_Beat\";\n\010C2S_Item\022\016\n\006roleid\030"
    "\001 \002(\t\022\017\n\007froleid\030\002 \002(\t\022\016\n\006itemid\030\003 \002(\t\";"
    "\n\010S2C_Item\022\016\n\006roleid\030\001 \002(\t\022\017\n\007froleid\030\002 "
    "\002(\t\022\016\n\006itemid\030\003 \002(\t\"`\n\017S2C_FightResult\022\016"
    "\n\006roleid\030\001 \002(\t\022\017\n\007froleid\030\002 \002(\t\022\013\n\003win\030\004"
    " \002(\005\022\014\n\004type\030\005 \002(\005\022\021\n\tequipment\030\n \002(\t\"`\n"
    "\017C2S_FightResult\022\016\n\006roleid\030\001 \002(\t\022\017\n\007frol"
    "eid\030\002 \002(\t\022\013\n\003win\030\004 \002(\005\022\014\n\004type\030\005 \002(\005\022\021\n\t"
    "equipment\030\n \002(\t\"H\n\nC2S_Friend\022\016\n\006roleid\030"
    "\001 \002(\t\022\013\n\003num\030\002 \001(\005\022\r\n\005index\030\003 \001(\005\022\016\n\006len"
    "gth\030\004 \001(\005\"+\n\nS2C_Friend\022\016\n\006roleid\030\001 \002(\t\022"
    "\r\n\005flist\030\002 \002(\t\".\n\rC2S_AddFriend\022\016\n\006rolei"
    "d\030\001 \002(\t\022\r\n\005flist\030\002 \002(\t\".\n\rS2C_AddFriend\022"
    "\016\n\006roleid\030\001 \002(\t\022\r\n\005flist\030\002 \002(\t*\336\002\n\004TYPE\022"
    "\006\n\002HA\020d\022\010\n\004LOST\020\001\022\014\n\010REGISTRY\020\002\022\014\n\010FILEL"
    "IST\020\003\022\n\n\006PKLIST\020\004\022\n\n\006PKSTAT\020\005\022\014\n\010PROPERT"
    "Y\020\006\022\020\n\014FIGHTREQUEST\020\007\022\021\n\rFIGHTRESPONSE\020\010"
    "\022\014\n\010FIGHTING\020\t\022\007\n\003QTE\020\n\022\010\n\004ITEM\020\013\022\014\n\010HAR"
    "DBEAT\020\014\022\017\n\013FIGHTRESULT\020\r\022\t\n\005PKTOP\020\016\022\010\n\004R"
    "OOM\020\017\022\r\n\tTIMEDELAY\020\024\022\010\n\004BILL\020\025\022\010\n\004MAIL\020\026"
    "\022\t\n\005MONEY\020\027\022\010\n\004GOLD\020\030\022\021\n\rADDFRIENDLIST\020\031"
    "\022\010\n\004RANK\020\032\022\016\n\nFRIENDLIST\020\033\022\013\n\007RANKTOP\020\034\022"
    "\013\n\007VERSION\020\035\022\t\n\005LOGIN\020\036*$\n\006RESULT\022\007\n\003WIN"
    "\020\001\022\010\n\004LOSE\020\002\022\007\n\003RUN\020\003*0\n\004STAT\022\t\n\005FIGHT\020\001"
    "\022\010\n\004BUSY\020\002\022\010\n\004IDLE\020\003\022\t\n\005BREAK\020\004", 3231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FightClub.proto", &protobuf_RegisterTypes);
  File::default_instance_ = new File();
  Status::default_instance_ = new Status();
  C2S_FileStatus::default_instance_ = new C2S_FileStatus();
  S2C_FileList::default_instance_ = new S2C_FileList();
  C2S_Version::default_instance_ = new C2S_Version();
  S2C_Version::default_instance_ = new S2C_Version();
  C2S_Registe::default_instance_ = new C2S_Registe();
  S2C_Registe::default_instance_ = new S2C_Registe();
  C2S_Login::default_instance_ = new C2S_Login();
  S2C_Login::default_instance_ = new S2C_Login();
  C2S_Room::default_instance_ = new C2S_Room();
  S2C_Room::default_instance_ = new S2C_Room();
  C2S_TimeStamp::default_instance_ = new C2S_TimeStamp();
  S2C_TimeStamp::default_instance_ = new S2C_TimeStamp();
  Equipment::default_instance_ = new Equipment();
  C2S_Property::default_instance_ = new C2S_Property();
  S2C_Property::default_instance_ = new S2C_Property();
  PKProperty::default_instance_ = new PKProperty();
  C2S_PKList::default_instance_ = new C2S_PKList();
  PKTop::default_instance_ = new PKTop();
  PKTopList::default_instance_ = new PKTopList();
  C2S_Bill::default_instance_ = new C2S_Bill();
  S2C_Bill::default_instance_ = new S2C_Bill();
  S2C_Gold::default_instance_ = new S2C_Gold();
  C2S_Money::default_instance_ = new C2S_Money();
  C2S_PKStat::default_instance_ = new C2S_PKStat();
  S2C_PKStat::default_instance_ = new S2C_PKStat();
  S2C_PKList::default_instance_ = new S2C_PKList();
  C2S_FightRequest::default_instance_ = new C2S_FightRequest();
  S2C_FightRequest::default_instance_ = new S2C_FightRequest();
  C2S_FightResponse::default_instance_ = new C2S_FightResponse();
  S2C_FightResponse::default_instance_ = new S2C_FightResponse();
  Beat::default_instance_ = new Beat();
  C2S_Fight::default_instance_ = new C2S_Fight();
  S2C_Fight::default_instance_ = new S2C_Fight();
  C2S_HardBeat::default_instance_ = new C2S_HardBeat();
  S2C_HardBeat::default_instance_ = new S2C_HardBeat();
  QTE_Beat::default_instance_ = new QTE_Beat();
  C2S_QTE::default_instance_ = new C2S_QTE();
  S2C_QTE::default_instance_ = new S2C_QTE();
  C2S_Item::default_instance_ = new C2S_Item();
  S2C_Item::default_instance_ = new S2C_Item();
  S2C_FightResult::default_instance_ = new S2C_FightResult();
  C2S_FightResult::default_instance_ = new C2S_FightResult();
  C2S_Friend::default_instance_ = new C2S_Friend();
  S2C_Friend::default_instance_ = new S2C_Friend();
  C2S_AddFriend::default_instance_ = new C2S_AddFriend();
  S2C_AddFriend::default_instance_ = new S2C_AddFriend();
  File::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  C2S_FileStatus::default_instance_->InitAsDefaultInstance();
  S2C_FileList::default_instance_->InitAsDefaultInstance();
  C2S_Version::default_instance_->InitAsDefaultInstance();
  S2C_Version::default_instance_->InitAsDefaultInstance();
  C2S_Registe::default_instance_->InitAsDefaultInstance();
  S2C_Registe::default_instance_->InitAsDefaultInstance();
  C2S_Login::default_instance_->InitAsDefaultInstance();
  S2C_Login::default_instance_->InitAsDefaultInstance();
  C2S_Room::default_instance_->InitAsDefaultInstance();
  S2C_Room::default_instance_->InitAsDefaultInstance();
  C2S_TimeStamp::default_instance_->InitAsDefaultInstance();
  S2C_TimeStamp::default_instance_->InitAsDefaultInstance();
  Equipment::default_instance_->InitAsDefaultInstance();
  C2S_Property::default_instance_->InitAsDefaultInstance();
  S2C_Property::default_instance_->InitAsDefaultInstance();
  PKProperty::default_instance_->InitAsDefaultInstance();
  C2S_PKList::default_instance_->InitAsDefaultInstance();
  PKTop::default_instance_->InitAsDefaultInstance();
  PKTopList::default_instance_->InitAsDefaultInstance();
  C2S_Bill::default_instance_->InitAsDefaultInstance();
  S2C_Bill::default_instance_->InitAsDefaultInstance();
  S2C_Gold::default_instance_->InitAsDefaultInstance();
  C2S_Money::default_instance_->InitAsDefaultInstance();
  C2S_PKStat::default_instance_->InitAsDefaultInstance();
  S2C_PKStat::default_instance_->InitAsDefaultInstance();
  S2C_PKList::default_instance_->InitAsDefaultInstance();
  C2S_FightRequest::default_instance_->InitAsDefaultInstance();
  S2C_FightRequest::default_instance_->InitAsDefaultInstance();
  C2S_FightResponse::default_instance_->InitAsDefaultInstance();
  S2C_FightResponse::default_instance_->InitAsDefaultInstance();
  Beat::default_instance_->InitAsDefaultInstance();
  C2S_Fight::default_instance_->InitAsDefaultInstance();
  S2C_Fight::default_instance_->InitAsDefaultInstance();
  C2S_HardBeat::default_instance_->InitAsDefaultInstance();
  S2C_HardBeat::default_instance_->InitAsDefaultInstance();
  QTE_Beat::default_instance_->InitAsDefaultInstance();
  C2S_QTE::default_instance_->InitAsDefaultInstance();
  S2C_QTE::default_instance_->InitAsDefaultInstance();
  C2S_Item::default_instance_->InitAsDefaultInstance();
  S2C_Item::default_instance_->InitAsDefaultInstance();
  S2C_FightResult::default_instance_->InitAsDefaultInstance();
  C2S_FightResult::default_instance_->InitAsDefaultInstance();
  C2S_Friend::default_instance_->InitAsDefaultInstance();
  S2C_Friend::default_instance_->InitAsDefaultInstance();
  C2S_AddFriend::default_instance_->InitAsDefaultInstance();
  S2C_AddFriend::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FightClub_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FightClub_2eproto {
  StaticDescriptorInitializer_FightClub_2eproto() {
    protobuf_AddDesc_FightClub_2eproto();
  }
} static_descriptor_initializer_FightClub_2eproto_;

const ::google::protobuf::EnumDescriptor* TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TYPE_descriptor_;
}
bool TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_descriptor_;
}
bool RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STAT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STAT_descriptor_;
}
bool STAT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int File::kPathFieldNumber;
const int File::kContentFieldNumber;
const int File::kMd5SumFieldNumber;
const int File::kMatchFieldNumber;
#endif  // !_MSC_VER

File::File()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void File::InitAsDefaultInstance() {
}

File::File(const File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void File::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5sum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  match_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

File::~File() {
  SharedDtor();
}

void File::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (md5sum_ != &::google::protobuf::internal::kEmptyString) {
    delete md5sum_;
  }
  if (this != default_instance_) {
  }
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_descriptor_;
}

const File& File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

File* File::default_instance_ = NULL;

File* File::New() const {
  return new File;
}

void File::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_md5sum()) {
      if (md5sum_ != &::google::protobuf::internal::kEmptyString) {
        md5sum_->clear();
      }
    }
    match_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_md5sum;
        break;
      }
      
      // required string md5sum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5sum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5sum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5sum().data(), this->md5sum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_match;
        break;
      }
      
      // required bool match = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_)));
          set_has_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  // required string md5sum = 3;
  if (has_md5sum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5sum().data(), this->md5sum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->md5sum(), output);
  }
  
  // required bool match = 4;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->match(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  // required string md5sum = 3;
  if (has_md5sum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5sum().data(), this->md5sum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5sum(), target);
  }
  
  // required bool match = 4;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->match(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int File::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // required string md5sum = 3;
    if (has_md5sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5sum());
    }
    
    // required bool match = 4;
    if (has_match()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_md5sum()) {
      set_md5sum(from.md5sum());
    }
    if (from.has_match()) {
      set_match(from.match());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void File::Swap(File* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(content_, other->content_);
    std::swap(md5sum_, other->md5sum_);
    std::swap(match_, other->match_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = File_descriptor_;
  metadata.reflection = File_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Status::kPathFieldNumber;
#endif  // !_MSC_VER

Status::Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Status::InitAsDefaultInstance() {
}

Status::Status(const Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  SharedDtor();
}

void Status::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New() const {
  return new Status;
}

void Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Status::Swap(Status* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_FileStatus::kMatchFieldNumber;
const int C2S_FileStatus::kStatFieldNumber;
#endif  // !_MSC_VER

C2S_FileStatus::C2S_FileStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_FileStatus::InitAsDefaultInstance() {
}

C2S_FileStatus::C2S_FileStatus(const C2S_FileStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_FileStatus::SharedCtor() {
  _cached_size_ = 0;
  match_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_FileStatus::~C2S_FileStatus() {
  SharedDtor();
}

void C2S_FileStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_FileStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_FileStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_FileStatus_descriptor_;
}

const C2S_FileStatus& C2S_FileStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_FileStatus* C2S_FileStatus::default_instance_ = NULL;

C2S_FileStatus* C2S_FileStatus::New() const {
  return new C2S_FileStatus;
}

void C2S_FileStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_ = false;
  }
  stat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_FileStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool match = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_)));
          set_has_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stat;
        break;
      }
      
      // repeated .PWRD.Status stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stat;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_FileStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool match = 1;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->match(), output);
  }
  
  // repeated .PWRD.Status stat = 2;
  for (int i = 0; i < this->stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stat(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_FileStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool match = 1;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->match(), target);
  }
  
  // repeated .PWRD.Status stat = 2;
  for (int i = 0; i < this->stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stat(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_FileStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool match = 1;
    if (has_match()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .PWRD.Status stat = 2;
  total_size += 1 * this->stat_size();
  for (int i = 0; i < this->stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stat(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_FileStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_FileStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_FileStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_FileStatus::MergeFrom(const C2S_FileStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  stat_.MergeFrom(from.stat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match()) {
      set_match(from.match());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_FileStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_FileStatus::CopyFrom(const C2S_FileStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_FileStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < stat_size(); i++) {
    if (!this->stat(i).IsInitialized()) return false;
  }
  return true;
}

void C2S_FileStatus::Swap(C2S_FileStatus* other) {
  if (other != this) {
    std::swap(match_, other->match_);
    stat_.Swap(&other->stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_FileStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_FileStatus_descriptor_;
  metadata.reflection = C2S_FileStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_FileList::kFileFieldNumber;
#endif  // !_MSC_VER

S2C_FileList::S2C_FileList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_FileList::InitAsDefaultInstance() {
}

S2C_FileList::S2C_FileList(const S2C_FileList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_FileList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_FileList::~S2C_FileList() {
  SharedDtor();
}

void S2C_FileList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_FileList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_FileList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_FileList_descriptor_;
}

const S2C_FileList& S2C_FileList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_FileList* S2C_FileList::default_instance_ = NULL;

S2C_FileList* S2C_FileList::New() const {
  return new S2C_FileList;
}

void S2C_FileList::Clear() {
  file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_FileList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PWRD.File file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_file;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_FileList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PWRD.File file = 1;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_FileList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PWRD.File file = 1;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_FileList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PWRD.File file = 1;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_FileList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_FileList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_FileList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_FileList::MergeFrom(const S2C_FileList& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_.MergeFrom(from.file_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_FileList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_FileList::CopyFrom(const S2C_FileList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_FileList::IsInitialized() const {
  
  for (int i = 0; i < file_size(); i++) {
    if (!this->file(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_FileList::Swap(S2C_FileList* other) {
  if (other != this) {
    file_.Swap(&other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_FileList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_FileList_descriptor_;
  metadata.reflection = S2C_FileList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Version::kVersionFieldNumber;
#endif  // !_MSC_VER

C2S_Version::C2S_Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Version::InitAsDefaultInstance() {
}

C2S_Version::C2S_Version(const C2S_Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Version::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Version::~C2S_Version() {
  SharedDtor();
}

void C2S_Version::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Version_descriptor_;
}

const C2S_Version& C2S_Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_Version* C2S_Version::default_instance_ = NULL;

C2S_Version* C2S_Version::New() const {
  return new C2S_Version;
}

void C2S_Version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Version::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Version::MergeFrom(const C2S_Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Version::CopyFrom(const C2S_Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void C2S_Version::Swap(C2S_Version* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Version_descriptor_;
  metadata.reflection = C2S_Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Version::kMatchFieldNumber;
const int S2C_Version::kFlistFieldNumber;
#endif  // !_MSC_VER

S2C_Version::S2C_Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Version::InitAsDefaultInstance() {
}

S2C_Version::S2C_Version(const S2C_Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Version::SharedCtor() {
  _cached_size_ = 0;
  match_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Version::~S2C_Version() {
  SharedDtor();
}

void S2C_Version::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Version_descriptor_;
}

const S2C_Version& S2C_Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_Version* S2C_Version::default_instance_ = NULL;

S2C_Version* S2C_Version::New() const {
  return new S2C_Version;
}

void S2C_Version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_ = false;
  }
  flist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool match = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_)));
          set_has_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flist;
        break;
      }
      
      // repeated .PWRD.File flist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool match = 1;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->match(), output);
  }
  
  // repeated .PWRD.File flist = 2;
  for (int i = 0; i < this->flist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->flist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool match = 1;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->match(), target);
  }
  
  // repeated .PWRD.File flist = 2;
  for (int i = 0; i < this->flist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->flist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Version::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool match = 1;
    if (has_match()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .PWRD.File flist = 2;
  total_size += 1 * this->flist_size();
  for (int i = 0; i < this->flist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Version::MergeFrom(const S2C_Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  flist_.MergeFrom(from.flist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match()) {
      set_match(from.match());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Version::CopyFrom(const S2C_Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < flist_size(); i++) {
    if (!this->flist(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_Version::Swap(S2C_Version* other) {
  if (other != this) {
    std::swap(match_, other->match_);
    flist_.Swap(&other->flist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Version_descriptor_;
  metadata.reflection = S2C_Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Registe::kRolenameFieldNumber;
const int C2S_Registe::kUuidFieldNumber;
#endif  // !_MSC_VER

C2S_Registe::C2S_Registe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Registe::InitAsDefaultInstance() {
}

C2S_Registe::C2S_Registe(const C2S_Registe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Registe::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Registe::~C2S_Registe() {
  SharedDtor();
}

void C2S_Registe::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Registe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Registe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Registe_descriptor_;
}

const C2S_Registe& C2S_Registe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_Registe* C2S_Registe::default_instance_ = NULL;

C2S_Registe* C2S_Registe::New() const {
  return new C2S_Registe;
}

void C2S_Registe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Registe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string rolename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }
      
      // required string uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Registe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string rolename = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // required string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Registe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string rolename = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // required string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Registe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string rolename = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // required string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Registe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Registe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Registe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Registe::MergeFrom(const C2S_Registe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Registe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Registe::CopyFrom(const C2S_Registe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Registe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void C2S_Registe::Swap(C2S_Registe* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Registe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Registe_descriptor_;
  metadata.reflection = C2S_Registe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Registe::kRoleidFieldNumber;
#endif  // !_MSC_VER

S2C_Registe::S2C_Registe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Registe::InitAsDefaultInstance() {
}

S2C_Registe::S2C_Registe(const S2C_Registe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Registe::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Registe::~S2C_Registe() {
  SharedDtor();
}

void S2C_Registe::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Registe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Registe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Registe_descriptor_;
}

const S2C_Registe& S2C_Registe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_Registe* S2C_Registe::default_instance_ = NULL;

S2C_Registe* S2C_Registe::New() const {
  return new S2C_Registe;
}

void S2C_Registe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Registe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Registe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Registe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Registe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Registe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Registe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Registe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Registe::MergeFrom(const S2C_Registe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Registe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Registe::CopyFrom(const S2C_Registe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Registe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void S2C_Registe::Swap(S2C_Registe* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Registe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Registe_descriptor_;
  metadata.reflection = S2C_Registe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Login::kRoleidFieldNumber;
#endif  // !_MSC_VER

C2S_Login::C2S_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Login::InitAsDefaultInstance() {
}

C2S_Login::C2S_Login(const C2S_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Login::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Login::~C2S_Login() {
  SharedDtor();
}

void C2S_Login::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Login_descriptor_;
}

const C2S_Login& C2S_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_Login* C2S_Login::default_instance_ = NULL;

C2S_Login* C2S_Login::New() const {
  return new C2S_Login;
}

void C2S_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Login::MergeFrom(const C2S_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Login::CopyFrom(const C2S_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void C2S_Login::Swap(C2S_Login* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Login_descriptor_;
  metadata.reflection = C2S_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Login::kOkFieldNumber;
#endif  // !_MSC_VER

S2C_Login::S2C_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Login::InitAsDefaultInstance() {
}

S2C_Login::S2C_Login(const S2C_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Login::SharedCtor() {
  _cached_size_ = 0;
  ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Login::~S2C_Login() {
  SharedDtor();
}

void S2C_Login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Login_descriptor_;
}

const S2C_Login& S2C_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_Login* S2C_Login::default_instance_ = NULL;

S2C_Login* S2C_Login::New() const {
  return new S2C_Login;
}

void S2C_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ok_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ok = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
          set_has_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool ok = 1;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool ok = 1;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ok = 1;
    if (has_ok()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Login::MergeFrom(const S2C_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ok()) {
      set_ok(from.ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Login::CopyFrom(const S2C_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void S2C_Login::Swap(S2C_Login* other) {
  if (other != this) {
    std::swap(ok_, other->ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Login_descriptor_;
  metadata.reflection = S2C_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Room::kRoleidFieldNumber;
#endif  // !_MSC_VER

C2S_Room::C2S_Room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Room::InitAsDefaultInstance() {
}

C2S_Room::C2S_Room(const C2S_Room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Room::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Room::~C2S_Room() {
  SharedDtor();
}

void C2S_Room::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Room_descriptor_;
}

const C2S_Room& C2S_Room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_Room* C2S_Room::default_instance_ = NULL;

C2S_Room* C2S_Room::New() const {
  return new C2S_Room;
}

void C2S_Room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Room::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Room::MergeFrom(const C2S_Room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Room::CopyFrom(const C2S_Room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void C2S_Room::Swap(C2S_Room* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Room_descriptor_;
  metadata.reflection = C2S_Room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Room::kRoleidFieldNumber;
const int S2C_Room::kOnlineFieldNumber;
const int S2C_Room::kBulletinFieldNumber;
const int S2C_Room::kMailFieldNumber;
#endif  // !_MSC_VER

S2C_Room::S2C_Room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Room::InitAsDefaultInstance() {
}

S2C_Room::S2C_Room(const S2C_Room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Room::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_ = 0;
  bulletin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Room::~S2C_Room() {
  SharedDtor();
}

void S2C_Room::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (bulletin_ != &::google::protobuf::internal::kEmptyString) {
    delete bulletin_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Room_descriptor_;
}

const S2C_Room& S2C_Room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_Room* S2C_Room::default_instance_ = NULL;

S2C_Room* S2C_Room::New() const {
  return new S2C_Room;
}

void S2C_Room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    online_ = 0;
    if (has_bulletin()) {
      if (bulletin_ != &::google::protobuf::internal::kEmptyString) {
        bulletin_->clear();
      }
    }
    mail_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }
      
      // required int32 online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bulletin;
        break;
      }
      
      // required string bulletin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bulletin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulletin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bulletin().data(), this->bulletin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mail;
        break;
      }
      
      // required int32 mail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_)));
          set_has_mail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required int32 online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->online(), output);
  }
  
  // required string bulletin = 3;
  if (has_bulletin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulletin().data(), this->bulletin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bulletin(), output);
  }
  
  // required int32 mail = 4;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required int32 online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->online(), target);
  }
  
  // required string bulletin = 3;
  if (has_bulletin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulletin().data(), this->bulletin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bulletin(), target);
  }
  
  // required int32 mail = 4;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Room::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required int32 online = 2;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }
    
    // required string bulletin = 3;
    if (has_bulletin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bulletin());
    }
    
    // required int32 mail = 4;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Room::MergeFrom(const S2C_Room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_bulletin()) {
      set_bulletin(from.bulletin());
    }
    if (from.has_mail()) {
      set_mail(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Room::CopyFrom(const S2C_Room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Room::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void S2C_Room::Swap(S2C_Room* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(online_, other->online_);
    std::swap(bulletin_, other->bulletin_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Room_descriptor_;
  metadata.reflection = S2C_Room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_TimeStamp::kTimestampFieldNumber;
#endif  // !_MSC_VER

C2S_TimeStamp::C2S_TimeStamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_TimeStamp::InitAsDefaultInstance() {
}

C2S_TimeStamp::C2S_TimeStamp(const C2S_TimeStamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_TimeStamp::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_TimeStamp::~C2S_TimeStamp() {
  SharedDtor();
}

void C2S_TimeStamp::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void C2S_TimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_TimeStamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_TimeStamp_descriptor_;
}

const C2S_TimeStamp& C2S_TimeStamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_TimeStamp* C2S_TimeStamp::default_instance_ = NULL;

C2S_TimeStamp* C2S_TimeStamp::New() const {
  return new C2S_TimeStamp;
}

void C2S_TimeStamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_TimeStamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_TimeStamp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_TimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_TimeStamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_TimeStamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_TimeStamp::MergeFrom(const C2S_TimeStamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_TimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_TimeStamp::CopyFrom(const C2S_TimeStamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_TimeStamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void C2S_TimeStamp::Swap(C2S_TimeStamp* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_TimeStamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_TimeStamp_descriptor_;
  metadata.reflection = C2S_TimeStamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_TimeStamp::kTimestampFieldNumber;
#endif  // !_MSC_VER

S2C_TimeStamp::S2C_TimeStamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_TimeStamp::InitAsDefaultInstance() {
}

S2C_TimeStamp::S2C_TimeStamp(const S2C_TimeStamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_TimeStamp::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_TimeStamp::~S2C_TimeStamp() {
  SharedDtor();
}

void S2C_TimeStamp::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void S2C_TimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_TimeStamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_TimeStamp_descriptor_;
}

const S2C_TimeStamp& S2C_TimeStamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_TimeStamp* S2C_TimeStamp::default_instance_ = NULL;

S2C_TimeStamp* S2C_TimeStamp::New() const {
  return new S2C_TimeStamp;
}

void S2C_TimeStamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_TimeStamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_TimeStamp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_TimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_TimeStamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_TimeStamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_TimeStamp::MergeFrom(const S2C_TimeStamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_TimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_TimeStamp::CopyFrom(const S2C_TimeStamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_TimeStamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void S2C_TimeStamp::Swap(S2C_TimeStamp* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_TimeStamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_TimeStamp_descriptor_;
  metadata.reflection = S2C_TimeStamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Equipment::kRoleidFieldNumber;
const int Equipment::kElistFieldNumber;
#endif  // !_MSC_VER

Equipment::Equipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Equipment::InitAsDefaultInstance() {
}

Equipment::Equipment(const Equipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Equipment::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  elist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equipment::~Equipment() {
  SharedDtor();
}

void Equipment::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (elist_ != &::google::protobuf::internal::kEmptyString) {
    delete elist_;
  }
  if (this != default_instance_) {
  }
}

void Equipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equipment_descriptor_;
}

const Equipment& Equipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

Equipment* Equipment::default_instance_ = NULL;

Equipment* Equipment::New() const {
  return new Equipment;
}

void Equipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_elist()) {
      if (elist_ != &::google::protobuf::internal::kEmptyString) {
        elist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Equipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_elist;
        break;
      }
      
      // required string elist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_elist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->elist().data(), this->elist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Equipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string elist = 2;
  if (has_elist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elist().data(), this->elist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->elist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Equipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string elist = 2;
  if (has_elist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elist().data(), this->elist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->elist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Equipment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string elist = 2;
    if (has_elist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->elist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Equipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Equipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equipment::MergeFrom(const Equipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_elist()) {
      set_elist(from.elist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Equipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equipment::CopyFrom(const Equipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Equipment::Swap(Equipment* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(elist_, other->elist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Equipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equipment_descriptor_;
  metadata.reflection = Equipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Property::kRoleidFieldNumber;
#endif  // !_MSC_VER

C2S_Property::C2S_Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Property::InitAsDefaultInstance() {
}

C2S_Property::C2S_Property(const C2S_Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Property::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Property::~C2S_Property() {
  SharedDtor();
}

void C2S_Property::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Property_descriptor_;
}

const C2S_Property& C2S_Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_Property* C2S_Property::default_instance_ = NULL;

C2S_Property* C2S_Property::New() const {
  return new C2S_Property;
}

void C2S_Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Property::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Property::MergeFrom(const C2S_Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Property::CopyFrom(const C2S_Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void C2S_Property::Swap(C2S_Property* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Property_descriptor_;
  metadata.reflection = C2S_Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Property::kRoleidFieldNumber;
const int S2C_Property::kRolenameFieldNumber;
const int S2C_Property::kPklevelFieldNumber;
const int S2C_Property::kPkexpFieldNumber;
const int S2C_Property::kRankexpFieldNumber;
const int S2C_Property::kRanklevelFieldNumber;
const int S2C_Property::kMoneyFieldNumber;
const int S2C_Property::kGoldFieldNumber;
const int S2C_Property::kItemsFieldNumber;
const int S2C_Property::kEquipsFieldNumber;
const int S2C_Property::kBuffsFieldNumber;
#endif  // !_MSC_VER

S2C_Property::S2C_Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Property::InitAsDefaultInstance() {
}

S2C_Property::S2C_Property(const S2C_Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Property::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pklevel_ = 0;
  pkexp_ = 0;
  rankexp_ = 0;
  ranklevel_ = 0;
  money_ = 0;
  gold_ = 0;
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equips_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Property::~S2C_Property() {
  SharedDtor();
}

void S2C_Property::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (equips_ != &::google::protobuf::internal::kEmptyString) {
    delete equips_;
  }
  if (buffs_ != &::google::protobuf::internal::kEmptyString) {
    delete buffs_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Property_descriptor_;
}

const S2C_Property& S2C_Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_Property* S2C_Property::default_instance_ = NULL;

S2C_Property* S2C_Property::New() const {
  return new S2C_Property;
}

void S2C_Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    pklevel_ = 0;
    pkexp_ = 0;
    rankexp_ = 0;
    ranklevel_ = 0;
    money_ = 0;
    gold_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
    if (has_equips()) {
      if (equips_ != &::google::protobuf::internal::kEmptyString) {
        equips_->clear();
      }
    }
    if (has_buffs()) {
      if (buffs_ != &::google::protobuf::internal::kEmptyString) {
        buffs_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rolename;
        break;
      }
      
      // required string rolename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pklevel;
        break;
      }
      
      // required int32 pklevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pklevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pklevel_)));
          set_has_pklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pkexp;
        break;
      }
      
      // required int32 pkexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkexp_)));
          set_has_pkexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rankexp;
        break;
      }
      
      // required int32 rankexp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankexp_)));
          set_has_rankexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ranklevel;
        break;
      }
      
      // required int32 ranklevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranklevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranklevel_)));
          set_has_ranklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_money;
        break;
      }
      
      // required int32 money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gold;
        break;
      }
      
      // required int32 gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_items;
        break;
      }
      
      // required string items = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->items().data(), this->items().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equips;
        break;
      }
      
      // required string equips = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equips().data(), this->equips().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_buffs;
        break;
      }
      
      // required string buffs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buffs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buffs().data(), this->buffs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  // required int32 pklevel = 3;
  if (has_pklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pklevel(), output);
  }
  
  // required int32 pkexp = 4;
  if (has_pkexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pkexp(), output);
  }
  
  // required int32 rankexp = 5;
  if (has_rankexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rankexp(), output);
  }
  
  // required int32 ranklevel = 6;
  if (has_ranklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ranklevel(), output);
  }
  
  // required int32 money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->money(), output);
  }
  
  // required int32 gold = 8;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gold(), output);
  }
  
  // required string items = 9;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->items(), output);
  }
  
  // required string equips = 10;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equips().data(), this->equips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->equips(), output);
  }
  
  // required string buffs = 11;
  if (has_buffs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buffs().data(), this->buffs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->buffs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  // required int32 pklevel = 3;
  if (has_pklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pklevel(), target);
  }
  
  // required int32 pkexp = 4;
  if (has_pkexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pkexp(), target);
  }
  
  // required int32 rankexp = 5;
  if (has_rankexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rankexp(), target);
  }
  
  // required int32 ranklevel = 6;
  if (has_ranklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ranklevel(), target);
  }
  
  // required int32 money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->money(), target);
  }
  
  // required int32 gold = 8;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gold(), target);
  }
  
  // required string items = 9;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->items(), target);
  }
  
  // required string equips = 10;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equips().data(), this->equips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->equips(), target);
  }
  
  // required string buffs = 11;
  if (has_buffs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buffs().data(), this->buffs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->buffs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Property::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string rolename = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // required int32 pklevel = 3;
    if (has_pklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pklevel());
    }
    
    // required int32 pkexp = 4;
    if (has_pkexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkexp());
    }
    
    // required int32 rankexp = 5;
    if (has_rankexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankexp());
    }
    
    // required int32 ranklevel = 6;
    if (has_ranklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranklevel());
    }
    
    // required int32 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
    // required int32 gold = 8;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string items = 9;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items());
    }
    
    // required string equips = 10;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equips());
    }
    
    // required string buffs = 11;
    if (has_buffs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buffs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Property::MergeFrom(const S2C_Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_pklevel()) {
      set_pklevel(from.pklevel());
    }
    if (from.has_pkexp()) {
      set_pkexp(from.pkexp());
    }
    if (from.has_rankexp()) {
      set_rankexp(from.rankexp());
    }
    if (from.has_ranklevel()) {
      set_ranklevel(from.ranklevel());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_items()) {
      set_items(from.items());
    }
    if (from.has_equips()) {
      set_equips(from.equips());
    }
    if (from.has_buffs()) {
      set_buffs(from.buffs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Property::CopyFrom(const S2C_Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void S2C_Property::Swap(S2C_Property* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(pklevel_, other->pklevel_);
    std::swap(pkexp_, other->pkexp_);
    std::swap(rankexp_, other->rankexp_);
    std::swap(ranklevel_, other->ranklevel_);
    std::swap(money_, other->money_);
    std::swap(gold_, other->gold_);
    std::swap(items_, other->items_);
    std::swap(equips_, other->equips_);
    std::swap(buffs_, other->buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Property_descriptor_;
  metadata.reflection = S2C_Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PKProperty::kRoleidFieldNumber;
const int PKProperty::kRolenameFieldNumber;
const int PKProperty::kPklevelFieldNumber;
const int PKProperty::kPkexpFieldNumber;
const int PKProperty::kRanklevelFieldNumber;
const int PKProperty::kRankexpFieldNumber;
const int PKProperty::kItemsFieldNumber;
const int PKProperty::kEquipsFieldNumber;
const int PKProperty::kBuffsFieldNumber;
#endif  // !_MSC_VER

PKProperty::PKProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PKProperty::InitAsDefaultInstance() {
}

PKProperty::PKProperty(const PKProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PKProperty::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pklevel_ = 0;
  pkexp_ = 0;
  ranklevel_ = 0;
  rankexp_ = 0;
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equips_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKProperty::~PKProperty() {
  SharedDtor();
}

void PKProperty::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (equips_ != &::google::protobuf::internal::kEmptyString) {
    delete equips_;
  }
  if (buffs_ != &::google::protobuf::internal::kEmptyString) {
    delete buffs_;
  }
  if (this != default_instance_) {
  }
}

void PKProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PKProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKProperty_descriptor_;
}

const PKProperty& PKProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

PKProperty* PKProperty::default_instance_ = NULL;

PKProperty* PKProperty::New() const {
  return new PKProperty;
}

void PKProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    pklevel_ = 0;
    pkexp_ = 0;
    ranklevel_ = 0;
    rankexp_ = 0;
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
    if (has_equips()) {
      if (equips_ != &::google::protobuf::internal::kEmptyString) {
        equips_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_buffs()) {
      if (buffs_ != &::google::protobuf::internal::kEmptyString) {
        buffs_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PKProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rolename;
        break;
      }
      
      // required string rolename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pklevel;
        break;
      }
      
      // required int32 pklevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pklevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pklevel_)));
          set_has_pklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pkexp;
        break;
      }
      
      // required int32 pkexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkexp_)));
          set_has_pkexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ranklevel;
        break;
      }
      
      // required int32 ranklevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranklevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranklevel_)));
          set_has_ranklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rankexp;
        break;
      }
      
      // required int32 rankexp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankexp_)));
          set_has_rankexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        break;
      }
      
      // required string items = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->items().data(), this->items().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equips;
        break;
      }
      
      // required string equips = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equips().data(), this->equips().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_buffs;
        break;
      }
      
      // required string buffs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buffs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buffs().data(), this->buffs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  // required int32 pklevel = 3;
  if (has_pklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pklevel(), output);
  }
  
  // required int32 pkexp = 4;
  if (has_pkexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pkexp(), output);
  }
  
  // required int32 ranklevel = 5;
  if (has_ranklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ranklevel(), output);
  }
  
  // required int32 rankexp = 6;
  if (has_rankexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rankexp(), output);
  }
  
  // required string items = 7;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->items(), output);
  }
  
  // required string equips = 8;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equips().data(), this->equips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->equips(), output);
  }
  
  // required string buffs = 9;
  if (has_buffs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buffs().data(), this->buffs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->buffs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PKProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  // required int32 pklevel = 3;
  if (has_pklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pklevel(), target);
  }
  
  // required int32 pkexp = 4;
  if (has_pkexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pkexp(), target);
  }
  
  // required int32 ranklevel = 5;
  if (has_ranklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ranklevel(), target);
  }
  
  // required int32 rankexp = 6;
  if (has_rankexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rankexp(), target);
  }
  
  // required string items = 7;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->items(), target);
  }
  
  // required string equips = 8;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equips().data(), this->equips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->equips(), target);
  }
  
  // required string buffs = 9;
  if (has_buffs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buffs().data(), this->buffs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->buffs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PKProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string rolename = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // required int32 pklevel = 3;
    if (has_pklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pklevel());
    }
    
    // required int32 pkexp = 4;
    if (has_pkexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkexp());
    }
    
    // required int32 ranklevel = 5;
    if (has_ranklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranklevel());
    }
    
    // required int32 rankexp = 6;
    if (has_rankexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankexp());
    }
    
    // required string items = 7;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items());
    }
    
    // required string equips = 8;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equips());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string buffs = 9;
    if (has_buffs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buffs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PKProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PKProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PKProperty::MergeFrom(const PKProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_pklevel()) {
      set_pklevel(from.pklevel());
    }
    if (from.has_pkexp()) {
      set_pkexp(from.pkexp());
    }
    if (from.has_ranklevel()) {
      set_ranklevel(from.ranklevel());
    }
    if (from.has_rankexp()) {
      set_rankexp(from.rankexp());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
    if (from.has_equips()) {
      set_equips(from.equips());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buffs()) {
      set_buffs(from.buffs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PKProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PKProperty::CopyFrom(const PKProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void PKProperty::Swap(PKProperty* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(pklevel_, other->pklevel_);
    std::swap(pkexp_, other->pkexp_);
    std::swap(ranklevel_, other->ranklevel_);
    std::swap(rankexp_, other->rankexp_);
    std::swap(items_, other->items_);
    std::swap(equips_, other->equips_);
    std::swap(buffs_, other->buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PKProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PKProperty_descriptor_;
  metadata.reflection = PKProperty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_PKList::kRoleidFieldNumber;
const int C2S_PKList::kRequestFieldNumber;
#endif  // !_MSC_VER

C2S_PKList::C2S_PKList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_PKList::InitAsDefaultInstance() {
}

C2S_PKList::C2S_PKList(const C2S_PKList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_PKList::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_PKList::~C2S_PKList() {
  SharedDtor();
}

void C2S_PKList::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    delete request_;
  }
  if (this != default_instance_) {
  }
}

void C2S_PKList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_PKList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_PKList_descriptor_;
}

const C2S_PKList& C2S_PKList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_PKList* C2S_PKList::default_instance_ = NULL;

C2S_PKList* C2S_PKList::New() const {
  return new C2S_PKList;
}

void C2S_PKList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_request()) {
      if (request_ != &::google::protobuf::internal::kEmptyString) {
        request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_PKList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }
      
      // required string request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request().data(), this->request().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_PKList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request().data(), this->request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_PKList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request().data(), this->request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_PKList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string request = 2;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_PKList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_PKList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_PKList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_PKList::MergeFrom(const C2S_PKList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_request()) {
      set_request(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_PKList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_PKList::CopyFrom(const C2S_PKList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PKList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void C2S_PKList::Swap(C2S_PKList* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_PKList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_PKList_descriptor_;
  metadata.reflection = C2S_PKList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PKTop::kRoleidFieldNumber;
const int PKTop::kPkexpFieldNumber;
#endif  // !_MSC_VER

PKTop::PKTop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PKTop::InitAsDefaultInstance() {
}

PKTop::PKTop(const PKTop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PKTop::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pkexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKTop::~PKTop() {
  SharedDtor();
}

void PKTop::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (this != default_instance_) {
  }
}

void PKTop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PKTop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKTop_descriptor_;
}

const PKTop& PKTop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

PKTop* PKTop::default_instance_ = NULL;

PKTop* PKTop::New() const {
  return new PKTop;
}

void PKTop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    pkexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PKTop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pkexp;
        break;
      }
      
      // required int32 pkexp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkexp_)));
          set_has_pkexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKTop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required int32 pkexp = 2;
  if (has_pkexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pkexp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PKTop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required int32 pkexp = 2;
  if (has_pkexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pkexp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PKTop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required int32 pkexp = 2;
    if (has_pkexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkexp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKTop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PKTop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PKTop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PKTop::MergeFrom(const PKTop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_pkexp()) {
      set_pkexp(from.pkexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PKTop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PKTop::CopyFrom(const PKTop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKTop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PKTop::Swap(PKTop* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(pkexp_, other->pkexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PKTop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PKTop_descriptor_;
  metadata.reflection = PKTop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PKTopList::kPktopFieldNumber;
#endif  // !_MSC_VER

PKTopList::PKTopList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PKTopList::InitAsDefaultInstance() {
}

PKTopList::PKTopList(const PKTopList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PKTopList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKTopList::~PKTopList() {
  SharedDtor();
}

void PKTopList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKTopList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PKTopList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKTopList_descriptor_;
}

const PKTopList& PKTopList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

PKTopList* PKTopList::default_instance_ = NULL;

PKTopList* PKTopList::New() const {
  return new PKTopList;
}

void PKTopList::Clear() {
  pktop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PKTopList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PWRD.PKTop pktop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pktop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pktop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pktop;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKTopList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PWRD.PKTop pktop = 1;
  for (int i = 0; i < this->pktop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pktop(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PKTopList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PWRD.PKTop pktop = 1;
  for (int i = 0; i < this->pktop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pktop(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PKTopList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PWRD.PKTop pktop = 1;
  total_size += 1 * this->pktop_size();
  for (int i = 0; i < this->pktop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pktop(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKTopList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PKTopList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PKTopList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PKTopList::MergeFrom(const PKTopList& from) {
  GOOGLE_CHECK_NE(&from, this);
  pktop_.MergeFrom(from.pktop_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PKTopList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PKTopList::CopyFrom(const PKTopList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKTopList::IsInitialized() const {
  
  for (int i = 0; i < pktop_size(); i++) {
    if (!this->pktop(i).IsInitialized()) return false;
  }
  return true;
}

void PKTopList::Swap(PKTopList* other) {
  if (other != this) {
    pktop_.Swap(&other->pktop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PKTopList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PKTopList_descriptor_;
  metadata.reflection = PKTopList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Bill::kRoleidFieldNumber;
const int C2S_Bill::kItemidFieldNumber;
const int C2S_Bill::kNumFieldNumber;
#endif  // !_MSC_VER

C2S_Bill::C2S_Bill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Bill::InitAsDefaultInstance() {
}

C2S_Bill::C2S_Bill(const C2S_Bill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Bill::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Bill::~C2S_Bill() {
  SharedDtor();
}

void C2S_Bill::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (itemid_ != &::google::protobuf::internal::kEmptyString) {
    delete itemid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Bill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Bill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Bill_descriptor_;
}

const C2S_Bill& C2S_Bill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_Bill* C2S_Bill::default_instance_ = NULL;

C2S_Bill* C2S_Bill::New() const {
  return new C2S_Bill;
}

void C2S_Bill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_itemid()) {
      if (itemid_ != &::google::protobuf::internal::kEmptyString) {
        itemid_->clear();
      }
    }
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Bill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemid;
        break;
      }
      
      // required string itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemid().data(), this->itemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }
      
      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Bill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->itemid(), output);
  }
  
  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Bill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemid(), target);
  }
  
  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Bill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemid());
    }
    
    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Bill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Bill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Bill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Bill::MergeFrom(const C2S_Bill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Bill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Bill::CopyFrom(const C2S_Bill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Bill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void C2S_Bill::Swap(C2S_Bill* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Bill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Bill_descriptor_;
  metadata.reflection = C2S_Bill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Bill::kRoleidFieldNumber;
const int S2C_Bill::kStatusFieldNumber;
#endif  // !_MSC_VER

S2C_Bill::S2C_Bill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Bill::InitAsDefaultInstance() {
}

S2C_Bill::S2C_Bill(const S2C_Bill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Bill::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Bill::~S2C_Bill() {
  SharedDtor();
}

void S2C_Bill::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Bill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Bill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Bill_descriptor_;
}

const S2C_Bill& S2C_Bill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_Bill* S2C_Bill::default_instance_ = NULL;

S2C_Bill* S2C_Bill::New() const {
  return new S2C_Bill;
}

void S2C_Bill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Bill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Bill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Bill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Bill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Bill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Bill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Bill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Bill::MergeFrom(const S2C_Bill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Bill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Bill::CopyFrom(const S2C_Bill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Bill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void S2C_Bill::Swap(S2C_Bill* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Bill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Bill_descriptor_;
  metadata.reflection = S2C_Bill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Gold::kRoleidFieldNumber;
const int S2C_Gold::kGoldFieldNumber;
#endif  // !_MSC_VER

S2C_Gold::S2C_Gold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Gold::InitAsDefaultInstance() {
}

S2C_Gold::S2C_Gold(const S2C_Gold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Gold::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Gold::~S2C_Gold() {
  SharedDtor();
}

void S2C_Gold::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Gold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Gold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Gold_descriptor_;
}

const S2C_Gold& S2C_Gold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_Gold* S2C_Gold::default_instance_ = NULL;

S2C_Gold* S2C_Gold::New() const {
  return new S2C_Gold;
}

void S2C_Gold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Gold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }
      
      // required int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Gold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Gold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Gold::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Gold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Gold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Gold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Gold::MergeFrom(const S2C_Gold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Gold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Gold::CopyFrom(const S2C_Gold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Gold::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void S2C_Gold::Swap(S2C_Gold* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Gold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Gold_descriptor_;
  metadata.reflection = S2C_Gold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Money::kRoleidFieldNumber;
const int C2S_Money::kMoneyFieldNumber;
#endif  // !_MSC_VER

C2S_Money::C2S_Money()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Money::InitAsDefaultInstance() {
}

C2S_Money::C2S_Money(const C2S_Money& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Money::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Money::~C2S_Money() {
  SharedDtor();
}

void C2S_Money::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Money::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Money_descriptor_;
}

const C2S_Money& C2S_Money::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_Money* C2S_Money::default_instance_ = NULL;

C2S_Money* C2S_Money::New() const {
  return new C2S_Money;
}

void C2S_Money::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }
      
      // required int32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Money::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Money::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Money::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Money* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Money*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Money::MergeFrom(const C2S_Money& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Money::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Money::CopyFrom(const C2S_Money& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Money::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void C2S_Money::Swap(C2S_Money* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Money::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Money_descriptor_;
  metadata.reflection = C2S_Money_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_PKStat::kRoleidFieldNumber;
#endif  // !_MSC_VER

C2S_PKStat::C2S_PKStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_PKStat::InitAsDefaultInstance() {
}

C2S_PKStat::C2S_PKStat(const C2S_PKStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_PKStat::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_PKStat::~C2S_PKStat() {
  SharedDtor();
}

void C2S_PKStat::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_PKStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_PKStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_PKStat_descriptor_;
}

const C2S_PKStat& C2S_PKStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_PKStat* C2S_PKStat::default_instance_ = NULL;

C2S_PKStat* C2S_PKStat::New() const {
  return new C2S_PKStat;
}

void C2S_PKStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_PKStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_PKStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_PKStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_PKStat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_PKStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_PKStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_PKStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_PKStat::MergeFrom(const C2S_PKStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_PKStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_PKStat::CopyFrom(const C2S_PKStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PKStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void C2S_PKStat::Swap(C2S_PKStat* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_PKStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_PKStat_descriptor_;
  metadata.reflection = C2S_PKStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_PKStat::kRoleidFieldNumber;
const int S2C_PKStat::kStatFieldNumber;
#endif  // !_MSC_VER

S2C_PKStat::S2C_PKStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_PKStat::InitAsDefaultInstance() {
}

S2C_PKStat::S2C_PKStat(const S2C_PKStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_PKStat::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stat_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_PKStat::~S2C_PKStat() {
  SharedDtor();
}

void S2C_PKStat::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (this != default_instance_) {
  }
}

void S2C_PKStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PKStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_PKStat_descriptor_;
}

const S2C_PKStat& S2C_PKStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_PKStat* S2C_PKStat::default_instance_ = NULL;

S2C_PKStat* S2C_PKStat::New() const {
  return new S2C_PKStat;
}

void S2C_PKStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    stat_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_PKStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stat;
        break;
      }
      
      // required .PWRD.STAT stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (PWRD::STAT_IsValid(value)) {
            set_stat(static_cast< PWRD::STAT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_PKStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required .PWRD.STAT stat = 2;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_PKStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required .PWRD.STAT stat = 2;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_PKStat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required .PWRD.STAT stat = 2;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PKStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_PKStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_PKStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_PKStat::MergeFrom(const S2C_PKStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_stat()) {
      set_stat(from.stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_PKStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PKStat::CopyFrom(const S2C_PKStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PKStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void S2C_PKStat::Swap(S2C_PKStat* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(stat_, other->stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_PKStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_PKStat_descriptor_;
  metadata.reflection = S2C_PKStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_PKList::kPkproFieldNumber;
#endif  // !_MSC_VER

S2C_PKList::S2C_PKList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_PKList::InitAsDefaultInstance() {
}

S2C_PKList::S2C_PKList(const S2C_PKList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_PKList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_PKList::~S2C_PKList() {
  SharedDtor();
}

void S2C_PKList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_PKList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PKList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_PKList_descriptor_;
}

const S2C_PKList& S2C_PKList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_PKList* S2C_PKList::default_instance_ = NULL;

S2C_PKList* S2C_PKList::New() const {
  return new S2C_PKList;
}

void S2C_PKList::Clear() {
  pkpro_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_PKList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PWRD.PKProperty pkpro = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pkpro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pkpro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pkpro;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_PKList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PWRD.PKProperty pkpro = 1;
  for (int i = 0; i < this->pkpro_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pkpro(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_PKList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PWRD.PKProperty pkpro = 1;
  for (int i = 0; i < this->pkpro_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pkpro(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_PKList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PWRD.PKProperty pkpro = 1;
  total_size += 1 * this->pkpro_size();
  for (int i = 0; i < this->pkpro_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pkpro(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PKList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_PKList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_PKList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_PKList::MergeFrom(const S2C_PKList& from) {
  GOOGLE_CHECK_NE(&from, this);
  pkpro_.MergeFrom(from.pkpro_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_PKList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PKList::CopyFrom(const S2C_PKList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PKList::IsInitialized() const {
  
  for (int i = 0; i < pkpro_size(); i++) {
    if (!this->pkpro(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_PKList::Swap(S2C_PKList* other) {
  if (other != this) {
    pkpro_.Swap(&other->pkpro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_PKList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_PKList_descriptor_;
  metadata.reflection = S2C_PKList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_FightRequest::kRoleidFieldNumber;
const int C2S_FightRequest::kFroleidFieldNumber;
#endif  // !_MSC_VER

C2S_FightRequest::C2S_FightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_FightRequest::InitAsDefaultInstance() {
}

C2S_FightRequest::C2S_FightRequest(const C2S_FightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_FightRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_FightRequest::~C2S_FightRequest() {
  SharedDtor();
}

void C2S_FightRequest::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_FightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_FightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_FightRequest_descriptor_;
}

const C2S_FightRequest& C2S_FightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_FightRequest* C2S_FightRequest::default_instance_ = NULL;

C2S_FightRequest* C2S_FightRequest::New() const {
  return new C2S_FightRequest;
}

void C2S_FightRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_FightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_FightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_FightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_FightRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_FightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_FightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_FightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_FightRequest::MergeFrom(const C2S_FightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_FightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_FightRequest::CopyFrom(const C2S_FightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_FightRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void C2S_FightRequest::Swap(C2S_FightRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_FightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_FightRequest_descriptor_;
  metadata.reflection = C2S_FightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_FightRequest::kRoleidFieldNumber;
const int S2C_FightRequest::kFroleidFieldNumber;
#endif  // !_MSC_VER

S2C_FightRequest::S2C_FightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_FightRequest::InitAsDefaultInstance() {
}

S2C_FightRequest::S2C_FightRequest(const S2C_FightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_FightRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_FightRequest::~S2C_FightRequest() {
  SharedDtor();
}

void S2C_FightRequest::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (this != default_instance_) {
  }
}

void S2C_FightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_FightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_FightRequest_descriptor_;
}

const S2C_FightRequest& S2C_FightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_FightRequest* S2C_FightRequest::default_instance_ = NULL;

S2C_FightRequest* S2C_FightRequest::New() const {
  return new S2C_FightRequest;
}

void S2C_FightRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_FightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_FightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_FightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_FightRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_FightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_FightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_FightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_FightRequest::MergeFrom(const S2C_FightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_FightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_FightRequest::CopyFrom(const S2C_FightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_FightRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void S2C_FightRequest::Swap(S2C_FightRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_FightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_FightRequest_descriptor_;
  metadata.reflection = S2C_FightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_FightResponse::kRoleidFieldNumber;
const int C2S_FightResponse::kFroleidFieldNumber;
const int C2S_FightResponse::kIdoFieldNumber;
#endif  // !_MSC_VER

C2S_FightResponse::C2S_FightResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_FightResponse::InitAsDefaultInstance() {
}

C2S_FightResponse::C2S_FightResponse(const C2S_FightResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_FightResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ido_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_FightResponse::~C2S_FightResponse() {
  SharedDtor();
}

void C2S_FightResponse::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_FightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_FightResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_FightResponse_descriptor_;
}

const C2S_FightResponse& C2S_FightResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_FightResponse* C2S_FightResponse::default_instance_ = NULL;

C2S_FightResponse* C2S_FightResponse::New() const {
  return new C2S_FightResponse;
}

void C2S_FightResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
    ido_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_FightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ido;
        break;
      }
      
      // required bool ido = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ido:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ido_)));
          set_has_ido();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_FightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // required bool ido = 3;
  if (has_ido()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ido(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_FightResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // required bool ido = 3;
  if (has_ido()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ido(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_FightResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
    // required bool ido = 3;
    if (has_ido()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_FightResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_FightResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_FightResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_FightResponse::MergeFrom(const C2S_FightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
    if (from.has_ido()) {
      set_ido(from.ido());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_FightResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_FightResponse::CopyFrom(const C2S_FightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_FightResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void C2S_FightResponse::Swap(C2S_FightResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(ido_, other->ido_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_FightResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_FightResponse_descriptor_;
  metadata.reflection = C2S_FightResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_FightResponse::kRoleidFieldNumber;
const int S2C_FightResponse::kFroleidFieldNumber;
const int S2C_FightResponse::kIdoFieldNumber;
#endif  // !_MSC_VER

S2C_FightResponse::S2C_FightResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_FightResponse::InitAsDefaultInstance() {
}

S2C_FightResponse::S2C_FightResponse(const S2C_FightResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_FightResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ido_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_FightResponse::~S2C_FightResponse() {
  SharedDtor();
}

void S2C_FightResponse::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (this != default_instance_) {
  }
}

void S2C_FightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_FightResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_FightResponse_descriptor_;
}

const S2C_FightResponse& S2C_FightResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_FightResponse* S2C_FightResponse::default_instance_ = NULL;

S2C_FightResponse* S2C_FightResponse::New() const {
  return new S2C_FightResponse;
}

void S2C_FightResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
    ido_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_FightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ido;
        break;
      }
      
      // required bool ido = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ido:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ido_)));
          set_has_ido();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_FightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // required bool ido = 3;
  if (has_ido()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ido(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_FightResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // required bool ido = 3;
  if (has_ido()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ido(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_FightResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
    // required bool ido = 3;
    if (has_ido()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_FightResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_FightResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_FightResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_FightResponse::MergeFrom(const S2C_FightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
    if (from.has_ido()) {
      set_ido(from.ido());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_FightResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_FightResponse::CopyFrom(const S2C_FightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_FightResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void S2C_FightResponse::Swap(S2C_FightResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(ido_, other->ido_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_FightResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_FightResponse_descriptor_;
  metadata.reflection = S2C_FightResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Beat::kHpFieldNumber;
const int Beat::kAnimationFieldNumber;
#endif  // !_MSC_VER

Beat::Beat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Beat::InitAsDefaultInstance() {
}

Beat::Beat(const Beat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Beat::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0;
  animation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Beat::~Beat() {
  SharedDtor();
}

void Beat::SharedDtor() {
  if (animation_ != &::google::protobuf::internal::kEmptyString) {
    delete animation_;
  }
  if (this != default_instance_) {
  }
}

void Beat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Beat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Beat_descriptor_;
}

const Beat& Beat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

Beat* Beat::default_instance_ = NULL;

Beat* Beat::New() const {
  return new Beat;
}

void Beat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0;
    if (has_animation()) {
      if (animation_ != &::google::protobuf::internal::kEmptyString) {
        animation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Beat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_animation;
        break;
      }
      
      // required string animation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_animation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->animation().data(), this->animation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Beat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }
  
  // required string animation = 2;
  if (has_animation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->animation().data(), this->animation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->animation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Beat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp(), target);
  }
  
  // required string animation = 2;
  if (has_animation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->animation().data(), this->animation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->animation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Beat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // required string animation = 2;
    if (has_animation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Beat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Beat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Beat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Beat::MergeFrom(const Beat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_animation()) {
      set_animation(from.animation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Beat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Beat::CopyFrom(const Beat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Beat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Beat::Swap(Beat* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(animation_, other->animation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Beat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Beat_descriptor_;
  metadata.reflection = Beat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Fight::kRoleidFieldNumber;
const int C2S_Fight::kFroleidFieldNumber;
const int C2S_Fight::kBeatFieldNumber;
#endif  // !_MSC_VER

C2S_Fight::C2S_Fight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Fight::InitAsDefaultInstance() {
  beat_ = const_cast< ::PWRD::Beat*>(&::PWRD::Beat::default_instance());
}

C2S_Fight::C2S_Fight(const C2S_Fight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Fight::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Fight::~C2S_Fight() {
  SharedDtor();
}

void C2S_Fight::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (this != default_instance_) {
    delete beat_;
  }
}

void C2S_Fight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Fight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Fight_descriptor_;
}

const C2S_Fight& C2S_Fight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_Fight* C2S_Fight::default_instance_ = NULL;

C2S_Fight* C2S_Fight::New() const {
  return new C2S_Fight;
}

void C2S_Fight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
    if (has_beat()) {
      if (beat_ != NULL) beat_->::PWRD::Beat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Fight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_beat;
        break;
      }
      
      // required .PWRD.Beat beat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Fight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // required .PWRD.Beat beat = 3;
  if (has_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->beat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Fight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // required .PWRD.Beat beat = 3;
  if (has_beat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->beat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Fight::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
    // required .PWRD.Beat beat = 3;
    if (has_beat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Fight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Fight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Fight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Fight::MergeFrom(const C2S_Fight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
    if (from.has_beat()) {
      mutable_beat()->::PWRD::Beat::MergeFrom(from.beat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Fight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Fight::CopyFrom(const C2S_Fight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Fight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_beat()) {
    if (!this->beat().IsInitialized()) return false;
  }
  return true;
}

void C2S_Fight::Swap(C2S_Fight* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(beat_, other->beat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Fight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Fight_descriptor_;
  metadata.reflection = C2S_Fight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Fight::kRoleidFieldNumber;
const int S2C_Fight::kFroleidFieldNumber;
const int S2C_Fight::kBeatFieldNumber;
#endif  // !_MSC_VER

S2C_Fight::S2C_Fight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Fight::InitAsDefaultInstance() {
  beat_ = const_cast< ::PWRD::Beat*>(&::PWRD::Beat::default_instance());
}

S2C_Fight::S2C_Fight(const S2C_Fight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Fight::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Fight::~S2C_Fight() {
  SharedDtor();
}

void S2C_Fight::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (this != default_instance_) {
    delete beat_;
  }
}

void S2C_Fight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Fight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Fight_descriptor_;
}

const S2C_Fight& S2C_Fight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_Fight* S2C_Fight::default_instance_ = NULL;

S2C_Fight* S2C_Fight::New() const {
  return new S2C_Fight;
}

void S2C_Fight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
    if (has_beat()) {
      if (beat_ != NULL) beat_->::PWRD::Beat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Fight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_beat;
        break;
      }
      
      // required .PWRD.Beat beat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Fight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // required .PWRD.Beat beat = 3;
  if (has_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->beat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Fight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // required .PWRD.Beat beat = 3;
  if (has_beat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->beat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Fight::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
    // required .PWRD.Beat beat = 3;
    if (has_beat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Fight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Fight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Fight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Fight::MergeFrom(const S2C_Fight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
    if (from.has_beat()) {
      mutable_beat()->::PWRD::Beat::MergeFrom(from.beat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Fight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Fight::CopyFrom(const S2C_Fight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Fight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_beat()) {
    if (!this->beat().IsInitialized()) return false;
  }
  return true;
}

void S2C_Fight::Swap(S2C_Fight* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(beat_, other->beat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Fight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Fight_descriptor_;
  metadata.reflection = S2C_Fight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_HardBeat::kRoleidFieldNumber;
const int C2S_HardBeat::kFroleidFieldNumber;
const int C2S_HardBeat::kBeatFieldNumber;
#endif  // !_MSC_VER

C2S_HardBeat::C2S_HardBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_HardBeat::InitAsDefaultInstance() {
  beat_ = const_cast< ::PWRD::Beat*>(&::PWRD::Beat::default_instance());
}

C2S_HardBeat::C2S_HardBeat(const C2S_HardBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_HardBeat::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_HardBeat::~C2S_HardBeat() {
  SharedDtor();
}

void C2S_HardBeat::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (this != default_instance_) {
    delete beat_;
  }
}

void C2S_HardBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_HardBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_HardBeat_descriptor_;
}

const C2S_HardBeat& C2S_HardBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_HardBeat* C2S_HardBeat::default_instance_ = NULL;

C2S_HardBeat* C2S_HardBeat::New() const {
  return new C2S_HardBeat;
}

void C2S_HardBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
    if (has_beat()) {
      if (beat_ != NULL) beat_->::PWRD::Beat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_HardBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_beat;
        break;
      }
      
      // required .PWRD.Beat beat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_HardBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // required .PWRD.Beat beat = 3;
  if (has_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->beat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_HardBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // required .PWRD.Beat beat = 3;
  if (has_beat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->beat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_HardBeat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
    // required .PWRD.Beat beat = 3;
    if (has_beat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_HardBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_HardBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_HardBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_HardBeat::MergeFrom(const C2S_HardBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
    if (from.has_beat()) {
      mutable_beat()->::PWRD::Beat::MergeFrom(from.beat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_HardBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_HardBeat::CopyFrom(const C2S_HardBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_HardBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_beat()) {
    if (!this->beat().IsInitialized()) return false;
  }
  return true;
}

void C2S_HardBeat::Swap(C2S_HardBeat* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(beat_, other->beat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_HardBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_HardBeat_descriptor_;
  metadata.reflection = C2S_HardBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_HardBeat::kRoleidFieldNumber;
const int S2C_HardBeat::kFroleidFieldNumber;
const int S2C_HardBeat::kBeatFieldNumber;
#endif  // !_MSC_VER

S2C_HardBeat::S2C_HardBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_HardBeat::InitAsDefaultInstance() {
  beat_ = const_cast< ::PWRD::Beat*>(&::PWRD::Beat::default_instance());
}

S2C_HardBeat::S2C_HardBeat(const S2C_HardBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_HardBeat::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_HardBeat::~S2C_HardBeat() {
  SharedDtor();
}

void S2C_HardBeat::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (this != default_instance_) {
    delete beat_;
  }
}

void S2C_HardBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_HardBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_HardBeat_descriptor_;
}

const S2C_HardBeat& S2C_HardBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_HardBeat* S2C_HardBeat::default_instance_ = NULL;

S2C_HardBeat* S2C_HardBeat::New() const {
  return new S2C_HardBeat;
}

void S2C_HardBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
    if (has_beat()) {
      if (beat_ != NULL) beat_->::PWRD::Beat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_HardBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_beat;
        break;
      }
      
      // required .PWRD.Beat beat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_HardBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // required .PWRD.Beat beat = 3;
  if (has_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->beat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_HardBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // required .PWRD.Beat beat = 3;
  if (has_beat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->beat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_HardBeat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
    // required .PWRD.Beat beat = 3;
    if (has_beat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_HardBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_HardBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_HardBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_HardBeat::MergeFrom(const S2C_HardBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
    if (from.has_beat()) {
      mutable_beat()->::PWRD::Beat::MergeFrom(from.beat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_HardBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_HardBeat::CopyFrom(const S2C_HardBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_HardBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_beat()) {
    if (!this->beat().IsInitialized()) return false;
  }
  return true;
}

void S2C_HardBeat::Swap(S2C_HardBeat* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(beat_, other->beat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_HardBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_HardBeat_descriptor_;
  metadata.reflection = S2C_HardBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QTE_Beat::kHpFieldNumber;
const int QTE_Beat::kDuringFieldNumber;
#endif  // !_MSC_VER

QTE_Beat::QTE_Beat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QTE_Beat::InitAsDefaultInstance() {
}

QTE_Beat::QTE_Beat(const QTE_Beat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QTE_Beat::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0;
  during_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QTE_Beat::~QTE_Beat() {
  SharedDtor();
}

void QTE_Beat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QTE_Beat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QTE_Beat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QTE_Beat_descriptor_;
}

const QTE_Beat& QTE_Beat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

QTE_Beat* QTE_Beat::default_instance_ = NULL;

QTE_Beat* QTE_Beat::New() const {
  return new QTE_Beat;
}

void QTE_Beat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0;
    during_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QTE_Beat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_during;
        break;
      }
      
      // required int32 during = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_during:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &during_)));
          set_has_during();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QTE_Beat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }
  
  // required int32 during = 2;
  if (has_during()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->during(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QTE_Beat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp(), target);
  }
  
  // required int32 during = 2;
  if (has_during()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->during(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QTE_Beat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // required int32 during = 2;
    if (has_during()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->during());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QTE_Beat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QTE_Beat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QTE_Beat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QTE_Beat::MergeFrom(const QTE_Beat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_during()) {
      set_during(from.during());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QTE_Beat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QTE_Beat::CopyFrom(const QTE_Beat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QTE_Beat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void QTE_Beat::Swap(QTE_Beat* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(during_, other->during_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QTE_Beat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QTE_Beat_descriptor_;
  metadata.reflection = QTE_Beat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_QTE::kRoleidFieldNumber;
const int C2S_QTE::kFroleidFieldNumber;
const int C2S_QTE::kQteFieldNumber;
#endif  // !_MSC_VER

C2S_QTE::C2S_QTE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_QTE::InitAsDefaultInstance() {
}

C2S_QTE::C2S_QTE(const C2S_QTE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_QTE::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_QTE::~C2S_QTE() {
  SharedDtor();
}

void C2S_QTE::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_QTE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_QTE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_QTE_descriptor_;
}

const C2S_QTE& C2S_QTE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_QTE* C2S_QTE::default_instance_ = NULL;

C2S_QTE* C2S_QTE::New() const {
  return new C2S_QTE;
}

void C2S_QTE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
  }
  qte_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_QTE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_qte;
        break;
      }
      
      // repeated .PWRD.QTE_Beat qte = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qte:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qte()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_qte;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_QTE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // repeated .PWRD.QTE_Beat qte = 3;
  for (int i = 0; i < this->qte_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->qte(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_QTE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // repeated .PWRD.QTE_Beat qte = 3;
  for (int i = 0; i < this->qte_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->qte(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_QTE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
  }
  // repeated .PWRD.QTE_Beat qte = 3;
  total_size += 1 * this->qte_size();
  for (int i = 0; i < this->qte_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qte(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_QTE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_QTE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_QTE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_QTE::MergeFrom(const C2S_QTE& from) {
  GOOGLE_CHECK_NE(&from, this);
  qte_.MergeFrom(from.qte_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_QTE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_QTE::CopyFrom(const C2S_QTE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_QTE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < qte_size(); i++) {
    if (!this->qte(i).IsInitialized()) return false;
  }
  return true;
}

void C2S_QTE::Swap(C2S_QTE* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    qte_.Swap(&other->qte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_QTE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_QTE_descriptor_;
  metadata.reflection = C2S_QTE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_QTE::kRoleidFieldNumber;
const int S2C_QTE::kFroleidFieldNumber;
const int S2C_QTE::kQteFieldNumber;
#endif  // !_MSC_VER

S2C_QTE::S2C_QTE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_QTE::InitAsDefaultInstance() {
}

S2C_QTE::S2C_QTE(const S2C_QTE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_QTE::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_QTE::~S2C_QTE() {
  SharedDtor();
}

void S2C_QTE::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (this != default_instance_) {
  }
}

void S2C_QTE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_QTE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_QTE_descriptor_;
}

const S2C_QTE& S2C_QTE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_QTE* S2C_QTE::default_instance_ = NULL;

S2C_QTE* S2C_QTE::New() const {
  return new S2C_QTE;
}

void S2C_QTE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
  }
  qte_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_QTE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_qte;
        break;
      }
      
      // repeated .PWRD.QTE_Beat qte = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qte:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qte()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_qte;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_QTE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // repeated .PWRD.QTE_Beat qte = 3;
  for (int i = 0; i < this->qte_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->qte(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_QTE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // repeated .PWRD.QTE_Beat qte = 3;
  for (int i = 0; i < this->qte_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->qte(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_QTE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
  }
  // repeated .PWRD.QTE_Beat qte = 3;
  total_size += 1 * this->qte_size();
  for (int i = 0; i < this->qte_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qte(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_QTE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_QTE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_QTE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_QTE::MergeFrom(const S2C_QTE& from) {
  GOOGLE_CHECK_NE(&from, this);
  qte_.MergeFrom(from.qte_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_QTE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_QTE::CopyFrom(const S2C_QTE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_QTE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < qte_size(); i++) {
    if (!this->qte(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_QTE::Swap(S2C_QTE* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    qte_.Swap(&other->qte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_QTE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_QTE_descriptor_;
  metadata.reflection = S2C_QTE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Item::kRoleidFieldNumber;
const int C2S_Item::kFroleidFieldNumber;
const int C2S_Item::kItemidFieldNumber;
#endif  // !_MSC_VER

C2S_Item::C2S_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Item::InitAsDefaultInstance() {
}

C2S_Item::C2S_Item(const C2S_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Item::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Item::~C2S_Item() {
  SharedDtor();
}

void C2S_Item::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (itemid_ != &::google::protobuf::internal::kEmptyString) {
    delete itemid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Item_descriptor_;
}

const C2S_Item& C2S_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_Item* C2S_Item::default_instance_ = NULL;

C2S_Item* C2S_Item::New() const {
  return new C2S_Item;
}

void C2S_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
    if (has_itemid()) {
      if (itemid_ != &::google::protobuf::internal::kEmptyString) {
        itemid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemid;
        break;
      }
      
      // required string itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemid().data(), this->itemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // required string itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->itemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // required string itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->itemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
    // required string itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Item::MergeFrom(const C2S_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Item::CopyFrom(const C2S_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void C2S_Item::Swap(C2S_Item* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Item_descriptor_;
  metadata.reflection = C2S_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Item::kRoleidFieldNumber;
const int S2C_Item::kFroleidFieldNumber;
const int S2C_Item::kItemidFieldNumber;
#endif  // !_MSC_VER

S2C_Item::S2C_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Item::InitAsDefaultInstance() {
}

S2C_Item::S2C_Item(const S2C_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Item::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Item::~S2C_Item() {
  SharedDtor();
}

void S2C_Item::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (itemid_ != &::google::protobuf::internal::kEmptyString) {
    delete itemid_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Item_descriptor_;
}

const S2C_Item& S2C_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_Item* S2C_Item::default_instance_ = NULL;

S2C_Item* S2C_Item::New() const {
  return new S2C_Item;
}

void S2C_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
    if (has_itemid()) {
      if (itemid_ != &::google::protobuf::internal::kEmptyString) {
        itemid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemid;
        break;
      }
      
      // required string itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemid().data(), this->itemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // required string itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->itemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // required string itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->itemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
    // required string itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Item::MergeFrom(const S2C_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Item::CopyFrom(const S2C_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void S2C_Item::Swap(S2C_Item* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Item_descriptor_;
  metadata.reflection = S2C_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_FightResult::kRoleidFieldNumber;
const int S2C_FightResult::kFroleidFieldNumber;
const int S2C_FightResult::kWinFieldNumber;
const int S2C_FightResult::kTypeFieldNumber;
const int S2C_FightResult::kEquipmentFieldNumber;
#endif  // !_MSC_VER

S2C_FightResult::S2C_FightResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_FightResult::InitAsDefaultInstance() {
}

S2C_FightResult::S2C_FightResult(const S2C_FightResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_FightResult::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_ = 0;
  type_ = 0;
  equipment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_FightResult::~S2C_FightResult() {
  SharedDtor();
}

void S2C_FightResult::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (equipment_ != &::google::protobuf::internal::kEmptyString) {
    delete equipment_;
  }
  if (this != default_instance_) {
  }
}

void S2C_FightResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_FightResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_FightResult_descriptor_;
}

const S2C_FightResult& S2C_FightResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_FightResult* S2C_FightResult::default_instance_ = NULL;

S2C_FightResult* S2C_FightResult::New() const {
  return new S2C_FightResult;
}

void S2C_FightResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
    win_ = 0;
    type_ = 0;
    if (has_equipment()) {
      if (equipment_ != &::google::protobuf::internal::kEmptyString) {
        equipment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_FightResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_win;
        break;
      }
      
      // required int32 win = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // required int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equipment;
        break;
      }
      
      // required string equipment = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equipment().data(), this->equipment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_FightResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // required int32 win = 4;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->win(), output);
  }
  
  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }
  
  // required string equipment = 10;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipment().data(), this->equipment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->equipment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_FightResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // required int32 win = 4;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->win(), target);
  }
  
  // required int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }
  
  // required string equipment = 10;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipment().data(), this->equipment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->equipment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_FightResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
    // required int32 win = 4;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }
    
    // required int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string equipment = 10;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_FightResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_FightResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_FightResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_FightResult::MergeFrom(const S2C_FightResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_equipment()) {
      set_equipment(from.equipment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_FightResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_FightResult::CopyFrom(const S2C_FightResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_FightResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void S2C_FightResult::Swap(S2C_FightResult* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(win_, other->win_);
    std::swap(type_, other->type_);
    std::swap(equipment_, other->equipment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_FightResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_FightResult_descriptor_;
  metadata.reflection = S2C_FightResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_FightResult::kRoleidFieldNumber;
const int C2S_FightResult::kFroleidFieldNumber;
const int C2S_FightResult::kWinFieldNumber;
const int C2S_FightResult::kTypeFieldNumber;
const int C2S_FightResult::kEquipmentFieldNumber;
#endif  // !_MSC_VER

C2S_FightResult::C2S_FightResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_FightResult::InitAsDefaultInstance() {
}

C2S_FightResult::C2S_FightResult(const C2S_FightResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_FightResult::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  froleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_ = 0;
  type_ = 0;
  equipment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_FightResult::~C2S_FightResult() {
  SharedDtor();
}

void C2S_FightResult::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (froleid_ != &::google::protobuf::internal::kEmptyString) {
    delete froleid_;
  }
  if (equipment_ != &::google::protobuf::internal::kEmptyString) {
    delete equipment_;
  }
  if (this != default_instance_) {
  }
}

void C2S_FightResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_FightResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_FightResult_descriptor_;
}

const C2S_FightResult& C2S_FightResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_FightResult* C2S_FightResult::default_instance_ = NULL;

C2S_FightResult* C2S_FightResult::New() const {
  return new C2S_FightResult;
}

void C2S_FightResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_froleid()) {
      if (froleid_ != &::google::protobuf::internal::kEmptyString) {
        froleid_->clear();
      }
    }
    win_ = 0;
    type_ = 0;
    if (has_equipment()) {
      if (equipment_ != &::google::protobuf::internal::kEmptyString) {
        equipment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_FightResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_froleid;
        break;
      }
      
      // required string froleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_froleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_froleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->froleid().data(), this->froleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_win;
        break;
      }
      
      // required int32 win = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // required int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equipment;
        break;
      }
      
      // required string equipment = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equipment().data(), this->equipment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_FightResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->froleid(), output);
  }
  
  // required int32 win = 4;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->win(), output);
  }
  
  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }
  
  // required string equipment = 10;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipment().data(), this->equipment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->equipment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_FightResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string froleid = 2;
  if (has_froleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->froleid().data(), this->froleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->froleid(), target);
  }
  
  // required int32 win = 4;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->win(), target);
  }
  
  // required int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }
  
  // required string equipment = 10;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipment().data(), this->equipment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->equipment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_FightResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string froleid = 2;
    if (has_froleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->froleid());
    }
    
    // required int32 win = 4;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }
    
    // required int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string equipment = 10;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_FightResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_FightResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_FightResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_FightResult::MergeFrom(const C2S_FightResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_froleid()) {
      set_froleid(from.froleid());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_equipment()) {
      set_equipment(from.equipment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_FightResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_FightResult::CopyFrom(const C2S_FightResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_FightResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void C2S_FightResult::Swap(C2S_FightResult* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(froleid_, other->froleid_);
    std::swap(win_, other->win_);
    std::swap(type_, other->type_);
    std::swap(equipment_, other->equipment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_FightResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_FightResult_descriptor_;
  metadata.reflection = C2S_FightResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Friend::kRoleidFieldNumber;
const int C2S_Friend::kNumFieldNumber;
const int C2S_Friend::kIndexFieldNumber;
const int C2S_Friend::kLengthFieldNumber;
#endif  // !_MSC_VER

C2S_Friend::C2S_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Friend::InitAsDefaultInstance() {
}

C2S_Friend::C2S_Friend(const C2S_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Friend::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  index_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Friend::~C2S_Friend() {
  SharedDtor();
}

void C2S_Friend::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Friend_descriptor_;
}

const C2S_Friend& C2S_Friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_Friend* C2S_Friend::default_instance_ = NULL;

C2S_Friend* C2S_Friend::New() const {
  return new C2S_Friend;
}

void C2S_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    num_ = 0;
    index_ = 0;
    length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }
      
      // optional int32 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // optional int32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // optional int32 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Friend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Friend::MergeFrom(const C2S_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Friend::CopyFrom(const C2S_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void C2S_Friend::Swap(C2S_Friend* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(num_, other->num_);
    std::swap(index_, other->index_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Friend_descriptor_;
  metadata.reflection = C2S_Friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Friend::kRoleidFieldNumber;
const int S2C_Friend::kFlistFieldNumber;
#endif  // !_MSC_VER

S2C_Friend::S2C_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Friend::InitAsDefaultInstance() {
}

S2C_Friend::S2C_Friend(const S2C_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Friend::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Friend::~S2C_Friend() {
  SharedDtor();
}

void S2C_Friend::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (flist_ != &::google::protobuf::internal::kEmptyString) {
    delete flist_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Friend_descriptor_;
}

const S2C_Friend& S2C_Friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_Friend* S2C_Friend::default_instance_ = NULL;

S2C_Friend* S2C_Friend::New() const {
  return new S2C_Friend;
}

void S2C_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_flist()) {
      if (flist_ != &::google::protobuf::internal::kEmptyString) {
        flist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flist;
        break;
      }
      
      // required string flist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flist().data(), this->flist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string flist = 2;
  if (has_flist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flist().data(), this->flist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->flist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string flist = 2;
  if (has_flist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flist().data(), this->flist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->flist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Friend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string flist = 2;
    if (has_flist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Friend::MergeFrom(const S2C_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_flist()) {
      set_flist(from.flist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Friend::CopyFrom(const S2C_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void S2C_Friend::Swap(S2C_Friend* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(flist_, other->flist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Friend_descriptor_;
  metadata.reflection = S2C_Friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_AddFriend::kRoleidFieldNumber;
const int C2S_AddFriend::kFlistFieldNumber;
#endif  // !_MSC_VER

C2S_AddFriend::C2S_AddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_AddFriend::InitAsDefaultInstance() {
}

C2S_AddFriend::C2S_AddFriend(const C2S_AddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_AddFriend::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_AddFriend::~C2S_AddFriend() {
  SharedDtor();
}

void C2S_AddFriend::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (flist_ != &::google::protobuf::internal::kEmptyString) {
    delete flist_;
  }
  if (this != default_instance_) {
  }
}

void C2S_AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_AddFriend_descriptor_;
}

const C2S_AddFriend& C2S_AddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

C2S_AddFriend* C2S_AddFriend::default_instance_ = NULL;

C2S_AddFriend* C2S_AddFriend::New() const {
  return new C2S_AddFriend;
}

void C2S_AddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_flist()) {
      if (flist_ != &::google::protobuf::internal::kEmptyString) {
        flist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flist;
        break;
      }
      
      // required string flist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flist().data(), this->flist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string flist = 2;
  if (has_flist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flist().data(), this->flist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->flist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_AddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string flist = 2;
  if (has_flist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flist().data(), this->flist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->flist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_AddFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string flist = 2;
    if (has_flist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_AddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_AddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_AddFriend::MergeFrom(const C2S_AddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_flist()) {
      set_flist(from.flist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_AddFriend::CopyFrom(const C2S_AddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_AddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void C2S_AddFriend::Swap(C2S_AddFriend* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(flist_, other->flist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_AddFriend_descriptor_;
  metadata.reflection = C2S_AddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_AddFriend::kRoleidFieldNumber;
const int S2C_AddFriend::kFlistFieldNumber;
#endif  // !_MSC_VER

S2C_AddFriend::S2C_AddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_AddFriend::InitAsDefaultInstance() {
}

S2C_AddFriend::S2C_AddFriend(const S2C_AddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_AddFriend::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_AddFriend::~S2C_AddFriend() {
  SharedDtor();
}

void S2C_AddFriend::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (flist_ != &::google::protobuf::internal::kEmptyString) {
    delete flist_;
  }
  if (this != default_instance_) {
  }
}

void S2C_AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_AddFriend_descriptor_;
}

const S2C_AddFriend& S2C_AddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightClub_2eproto();  return *default_instance_;
}

S2C_AddFriend* S2C_AddFriend::default_instance_ = NULL;

S2C_AddFriend* S2C_AddFriend::New() const {
  return new S2C_AddFriend;
}

void S2C_AddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    if (has_flist()) {
      if (flist_ != &::google::protobuf::internal::kEmptyString) {
        flist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flist;
        break;
      }
      
      // required string flist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flist().data(), this->flist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roleid(), output);
  }
  
  // required string flist = 2;
  if (has_flist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flist().data(), this->flist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->flist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_AddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roleid(), target);
  }
  
  // required string flist = 2;
  if (has_flist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flist().data(), this->flist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->flist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_AddFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }
    
    // required string flist = 2;
    if (has_flist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_AddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_AddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_AddFriend::MergeFrom(const S2C_AddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_flist()) {
      set_flist(from.flist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_AddFriend::CopyFrom(const S2C_AddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_AddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void S2C_AddFriend::Swap(S2C_AddFriend* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(flist_, other->flist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_AddFriend_descriptor_;
  metadata.reflection = S2C_AddFriend_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PWRD

// @@protoc_insertion_point(global_scope)
