// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogRecord.proto

#ifndef PROTOBUF_LogRecord_2eproto__INCLUDED
#define PROTOBUF_LogRecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace PWRD {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LogRecord_2eproto();
void protobuf_AssignDesc_LogRecord_2eproto();
void protobuf_ShutdownFile_LogRecord_2eproto();

class LogRecord;

enum TYPE {
  HA = 1,
  LOG = 2
};
bool TYPE_IsValid(int value);
const TYPE TYPE_MIN = HA;
const TYPE TYPE_MAX = LOG;
const int TYPE_ARRAYSIZE = TYPE_MAX + 1;

// ===================================================================

class LogRecord : public ::google::protobuf::MessageLite {
 public:
  LogRecord();
  virtual ~LogRecord();
  
  LogRecord(const LogRecord& from);
  
  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const LogRecord& default_instance();
  
  void Swap(LogRecord* other);
  
  // implements Message ----------------------------------------------
  
  LogRecord* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LogRecord& from);
  void MergeFrom(const LogRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 sequnce = 1;
  inline bool has_sequnce() const;
  inline void clear_sequnce();
  static const int kSequnceFieldNumber = 1;
  inline ::google::protobuf::int64 sequnce() const;
  inline void set_sequnce(::google::protobuf::int64 value);
  
  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required string server = 3;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 3;
  inline const ::std::string& server() const;
  inline void set_server(const ::std::string& value);
  inline void set_server(const char* value);
  inline void set_server(const char* value, size_t size);
  inline ::std::string* mutable_server();
  inline ::std::string* release_server();
  
  // required string process = 4;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 4;
  inline const ::std::string& process() const;
  inline void set_process(const ::std::string& value);
  inline void set_process(const char* value);
  inline void set_process(const char* value, size_t size);
  inline ::std::string* mutable_process();
  inline ::std::string* release_process();
  
  // required string message = 5;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 5;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // @@protoc_insertion_point(class_scope:PWRD.LogRecord)
 private:
  inline void set_has_sequnce();
  inline void clear_has_sequnce();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_process();
  inline void clear_has_process();
  inline void set_has_message();
  inline void clear_has_message();
  
  ::google::protobuf::int64 sequnce_;
  ::std::string* server_;
  ::std::string* process_;
  ::std::string* message_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_LogRecord_2eproto();
  friend void protobuf_AssignDesc_LogRecord_2eproto();
  friend void protobuf_ShutdownFile_LogRecord_2eproto();
  
  void InitAsDefaultInstance();
  static LogRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// LogRecord

// optional int64 sequnce = 1;
inline bool LogRecord::has_sequnce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRecord::set_has_sequnce() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRecord::clear_has_sequnce() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRecord::clear_sequnce() {
  sequnce_ = GOOGLE_LONGLONG(0);
  clear_has_sequnce();
}
inline ::google::protobuf::int64 LogRecord::sequnce() const {
  return sequnce_;
}
inline void LogRecord::set_sequnce(::google::protobuf::int64 value) {
  set_has_sequnce();
  sequnce_ = value;
}

// required int32 type = 2;
inline bool LogRecord::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRecord::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LogRecord::type() const {
  return type_;
}
inline void LogRecord::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string server = 3;
inline bool LogRecord::has_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRecord::set_has_server() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRecord::clear_has_server() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRecord::clear_server() {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    server_->clear();
  }
  clear_has_server();
}
inline const ::std::string& LogRecord::server() const {
  return *server_;
}
inline void LogRecord::set_server(const ::std::string& value) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void LogRecord::set_server(const char* value) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void LogRecord::set_server(const char* value, size_t size) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRecord::mutable_server() {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  return server_;
}
inline ::std::string* LogRecord::release_server() {
  clear_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_;
    server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string process = 4;
inline bool LogRecord::has_process() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogRecord::set_has_process() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogRecord::clear_has_process() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogRecord::clear_process() {
  if (process_ != &::google::protobuf::internal::kEmptyString) {
    process_->clear();
  }
  clear_has_process();
}
inline const ::std::string& LogRecord::process() const {
  return *process_;
}
inline void LogRecord::set_process(const ::std::string& value) {
  set_has_process();
  if (process_ == &::google::protobuf::internal::kEmptyString) {
    process_ = new ::std::string;
  }
  process_->assign(value);
}
inline void LogRecord::set_process(const char* value) {
  set_has_process();
  if (process_ == &::google::protobuf::internal::kEmptyString) {
    process_ = new ::std::string;
  }
  process_->assign(value);
}
inline void LogRecord::set_process(const char* value, size_t size) {
  set_has_process();
  if (process_ == &::google::protobuf::internal::kEmptyString) {
    process_ = new ::std::string;
  }
  process_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRecord::mutable_process() {
  set_has_process();
  if (process_ == &::google::protobuf::internal::kEmptyString) {
    process_ = new ::std::string;
  }
  return process_;
}
inline ::std::string* LogRecord::release_process() {
  clear_has_process();
  if (process_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = process_;
    process_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string message = 5;
inline bool LogRecord::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogRecord::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogRecord::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogRecord::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& LogRecord::message() const {
  return *message_;
}
inline void LogRecord::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void LogRecord::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void LogRecord::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRecord::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* LogRecord::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PWRD

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LogRecord_2eproto__INCLUDED
